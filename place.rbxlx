<roblox version="4">
  <Item class="HttpService" referent="0">
    <Properties>
      <string name="Name">HttpService</string>
      <bool name="HttpEnabled">true</bool>
    </Properties>
  </Item>
  <Item class="Players" referent="1">
    <Properties>
      <string name="Name">Players</string>
      <bool name="CharacterAutoLoads">false</bool>
    </Properties>
  </Item>
  <Item class="ReplicatedStorage" referent="2">
    <Properties>
      <string name="Name">ReplicatedStorage</string>
    </Properties>
    <Item class="ModuleScript" referent="3">
      <Properties>
        <string name="Name">Roact</string>
        <string name="Source">--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconcilerCompat = require(script.createReconcilerCompat)
local strict = require(script.strict)
local Binding = require(script.Binding)
local VirtualTree = require(script.VirtualTree)

local function mount(element, hostParent, hostKey)
	return VirtualTree.mount(element, {
		hostParent = hostParent,
		hostKey = hostKey,
	})
end

local reconcilerCompat = createReconcilerCompat(VirtualTree)

local Roact = strict {
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = mount,
	unmount = VirtualTree.unmount,
	update = VirtualTree.update,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {
	},
}

return Roact</string>
      </Properties>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">Binding</string>
          <string name="Source">local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = (
					"Expected arg #1 to contain only bindings, but key %q had a non-binding value"
				):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">Binding.spec</string>
          <string name="Source">return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({binding1, binding2})

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			expect(function()
				Binding.join("hi")
			end).to.throw()
		end)

		it("should throw when a non-binding value is passed via table", function()
			expect(function()
				local binding = Binding.create(123)

				Binding.join({
					binding,
					"abcde",
				})
			end).to.throw()
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="6">
        <Properties>
          <string name="Name">Component</string>
          <string name="Source">local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate or
		lifecyclePhase == ComponentLifecyclePhase.WillUpdate or
		lifecyclePhase == ComponentLifecyclePhase.Render or
		lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.DidMount or
		lifecyclePhase == ComponentLifecyclePhase.DidUpdate or
		lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)

	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)

	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(
		tostring(internalData.componentClass)
	)

	error(message, 0)
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
			typeof(validator),
			self.__componentName
		))
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "&lt;Validator function did not supply a message>"
		error(("Property validation failed: %s\n\n%s"):format(
			tostring(failureReason),
			self:getElementTraceback() or "&lt;enable element tracebacks>"),
		0)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.context)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
	end

	-- It's possible for init() to redefine _context!
	virtualNode.context = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component</string>
        </Properties>
      </Item>
      <Item class="Folder" referent="7">
        <Properties>
          <string name="Name">Component.spec</string>
        </Properties>
        <Item class="ModuleScript" referent="8">
          <Properties>
            <string name="Name">context.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render()
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render()
		end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render()
		end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="9">
          <Properties>
            <string name="Name">defaultProps.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render()
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="10">
          <Properties>
            <string name="Name">didMount.spec</string>
            <string name="Source">return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="11">
          <Properties>
            <string name="Name">didUpdate.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render()
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="12">
          <Properties>
            <string name="Name">extend.spec</string>
            <string name="Source">return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="13">
          <Properties>
            <string name="Name">getDerivedStateFromProps.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(createElement(WithDerivedState, {
			someProp = 1,
		}), hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, createElement(WithDerivedState, {
			someProp = 2,
		}))

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="14">
          <Properties>
            <string name="Name">getElementTraceback.spec</string>
            <string name="Source">return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="15">
          <Properties>
            <string name="Name">init.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="16">
          <Properties>
            <string name="Name">render.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="17">
          <Properties>
            <string name="Name">setState.spec</string>
            <string name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local VirtualTree = require(script.Parent.Parent.VirtualTree)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	local function mountWithNoop(element, hostParent, hostKey)
		return VirtualTree.mount(element, {
			hostParent = hostParent,
			hostKey = hostKey,
			reconciler = noopReconciler
		})
	end

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			mountWithNoop(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(mountWithNoop, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = mountWithNoop(initialElement)

			local success, result = pcall(VirtualTree.update, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = mountWithNoop(initialElement)

			local success, result = pcall(VirtualTree.update, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1
				})
			end

			local element = createElement(TestComponent)
			local tree = mountWithNoop(element)

			local success, result = pcall(VirtualTree.unmount, tree)

			expect(success).to.equal(false)
			expect(result:match("willUnmount")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(state, props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar"
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar"
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount"
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted"
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end
]]></string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="18">
          <Properties>
            <string name="Name">shouldUpdate.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="19">
          <Properties>
            <string name="Name">validateProps.spec</string>
            <string name="Source">return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1
			})

			setStateCallback({
				b = 1
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="20">
          <Properties>
            <string name="Name">willUnmount.spec</string>
            <string name="Source">return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="21">
          <Properties>
            <string name="Name">willUpdate.spec</string>
            <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2
		})
	end)
end</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="22">
        <Properties>
          <string name="Name">ComponentLifecyclePhase</string>
          <string name="Source">local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="23">
        <Properties>
          <string name="Name">Config</string>
          <string name="Source">--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = (
				"Invalid global configuration key %q. Valid configuration keys are: %s"
			):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = (
				"Invalid global configuration key %q (type %s). Valid configuration keys are: %s"
			):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(
				tostring(value),
				typeof(value),
				tostring(key)
			)

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="24">
        <Properties>
          <string name="Name">Config.spec</string>
          <string name="Source">return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="25">
        <Properties>
          <string name="Name">ElementKind</string>
          <string name="Source">--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="26">
        <Properties>
          <string name="Name">ElementKind.spec</string>
          <string name="Source">return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo()
			end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="27">
        <Properties>
          <string name="Name">ElementUtils</string>
          <string name="Source">local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="28">
        <Properties>
          <string name="Name">ElementUtils.spec</string>
          <string name="Source">return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="29">
        <Properties>
          <string name="Name">GlobalConfig</string>
          <string name="Source">--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="30">
        <Properties>
          <string name="Name">GlobalConfig.spec</string>
          <string name="Source">return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="31">
        <Properties>
          <string name="Name">Logging</string>
          <string name="Source">--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = {"LogInfo {"}

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="32">
        <Properties>
          <string name="Name">None</string>
          <string name="Source">local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="33">
        <Properties>
          <string name="Name">NoopRenderer</string>
          <string name="Source">--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(reconciler, node)
end

function NoopRenderer.unmountHostNode(reconciler, node)
end

function NoopRenderer.updateHostNode(reconciler, node, newElement)
	return node
end

return NoopRenderer</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="34">
        <Properties>
          <string name="Name">Portal</string>
          <string name="Source">local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal</string>
        </Properties>
      </Item>
      <Item class="Folder" referent="35">
        <Properties>
          <string name="Name">PropMarkers</string>
        </Properties>
        <Item class="ModuleScript" referent="36">
          <Properties>
            <string name="Name">Change</string>
            <string name="Source">--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="37">
          <Properties>
            <string name="Name">Change.spec</string>
            <string name="Source">return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="38">
          <Properties>
            <string name="Name">Children</string>
            <string name="Source">local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="39">
          <Properties>
            <string name="Name">Event</string>
            <string name="Source">--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end
})

return Event</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="40">
          <Properties>
            <string name="Name">Event.spec</string>
            <string name="Source">return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="41">
          <Properties>
            <string name="Name">Ref</string>
            <string name="Source">local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="42">
        <Properties>
          <string name="Name">PureComponent</string>
          <string name="Source">--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="43">
        <Properties>
          <string name="Name">PureComponent.spec</string>
          <string name="Source">return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)
	local VirtualTree = require(script.Parent.VirtualTree)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	local function mountWithNoop(element, hostParent, hostKey)
		return VirtualTree.mount(element, {
			hostParent = hostParent,
			hostKey = hostKey,
			reconciler = noopReconciler
		})
	end

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = mountWithNoop(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		VirtualTree.unmount(tree)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="44">
        <Properties>
          <string name="Name">RobloxRenderer</string>
          <string name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(
			typeof(ref)
		))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="45">
        <Properties>
          <string name="Name">RobloxRenderer.spec</string>
          <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue
			}, {
				ChildA = createElement("IntValue", {
					Value = 1
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				})
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test"
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					})
				})
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
			end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer)
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				})
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar"
			})
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="46">
        <Properties>
          <string name="Name">SingleEventManager</string>
          <string name="Source">--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local event = self._instance:GetPropertyChangedSignal(key)
	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index &lt;= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount))

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="47">
        <Properties>
          <string name="Name">SingleEventManager.spec</string>
          <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, {1, 2, 3, 4})
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="48">
        <Properties>
          <string name="Name">Symbol</string>
          <string name="Source">--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="49">
        <Properties>
          <string name="Name">Symbol.spec</string>
          <string name="Source">return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="50">
        <Properties>
          <string name="Name">Type</string>
          <string name="Source">--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="51">
        <Properties>
          <string name="Name">Type.spec</string>
          <string name="Source">return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="52">
        <Properties>
          <string name="Name">VirtualTree</string>
          <string name="Source">local createReconciler = require(script.Parent.createReconciler)
local RobloxRenderer = require(script.Parent.RobloxRenderer)
local shallow = require(script.Parent.shallow)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local DEFAULT_RENDERER = createReconciler(RobloxRenderer)

local InternalData = Symbol.named("InternalData")

local VirtualTree = {}
local VirtualTreePublic = {}
VirtualTreePublic.__index = VirtualTreePublic

function VirtualTree.mount(element, options)
	options = options or {}
	local hostParent = options.hostParent
	local hostKey = options.hostKey or "RoactTree"
	local reconciler = options.reconciler or DEFAULT_RENDERER

	if config.typeChecks then
		assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
		assert(reconciler.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
	end

	local rootNode = reconciler.mountVirtualNode(element, hostParent, hostKey)

	local tree = {
		[Type] = Type.VirtualTree,
		[InternalData] = {
			rootNode = rootNode,
			mounted = true,
			reconciler = reconciler,
		},
	}

	setmetatable(tree, VirtualTreePublic)

	return tree
end

function VirtualTree.update(tree, newElement)
	local internalData = tree[InternalData]

	if config.typeChecks then
		assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
		assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		assert(internalData.mounted, "Cannot updated a Roact tree that has been unmounted")
	end

	local reconciler = internalData.reconciler

	internalData.rootNode = reconciler.updateVirtualNode(internalData.rootNode, newElement)

	return tree
end

function VirtualTree.unmount(tree)
	local internalData = tree[InternalData]

	if config.typeChecks then
		assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
		assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
	end

	internalData.mounted = false

	if internalData.rootNode ~= nil then
		local reconciler = internalData.reconciler

		reconciler.unmountVirtualNode(internalData.rootNode)
	end
end

function VirtualTreePublic:getShallowWrapper(options)
	assert(Type.of(self) == Type.VirtualTree, "Expected method getShallowWrapper to be called with `:`")

	local internalData = self[InternalData]
	local rootNode = internalData.rootNode

	return shallow(rootNode, options)
end

return VirtualTree</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="53">
        <Properties>
          <string name="Name">VirtualTree.spec</string>
          <string name="Source">return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local VirtualTree = require(script.Parent.VirtualTree)

	local noopReconciler = createReconciler(NoopRenderer)

	local function mountWithNoop(element, hostParent, hostKey)
		return VirtualTree.mount(element, {
			hostParent = hostParent,
			hostKey = hostKey,
			reconciler = noopReconciler
		})
	end

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = mountWithNoop(createElement("StringValue"))

			expect(tree).to.be.ok()

			VirtualTree.unmount(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = mountWithNoop(createElement("StringValue"))

			expect(tree).to.be.ok()

			VirtualTree.update(tree, createElement("StringValue"))

			VirtualTree.unmount(tree)
		end)
	end)

	describe("getShallowWrapper", function()
		it("should return a shallow wrapper", function()
			local tree = VirtualTree.mount(createElement("StringValue"))

			expect(tree).to.be.ok()

			local wrapper = tree:getShallowWrapper()

			expect(wrapper).to.be.ok()
			expect(wrapper.type.className).to.equal("StringValue")
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="54">
        <Properties>
          <string name="Name">assertDeepEqual</string>
          <string name="Source">--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]
local deepEqual = require(script.Parent.deepEqual)

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate
			:gsub("{1}", "first")
			:gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="55">
        <Properties>
          <string name="Name">assertDeepEqual.spec</string>
          <string name="Source">return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should not throw if the args are equal", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
	end)

	it("should throw and format the error message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
		expect(message:find("{1}")).never.to.be.ok()
		expect(message:find("{2}")).never.to.be.ok()
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="56">
        <Properties>
          <string name="Name">assign</string>
          <string name="Source">local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="57">
        <Properties>
          <string name="Name">assign.spec</string>
          <string name="Source">return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="58">
        <Properties>
          <string name="Name">createElement</string>
          <string name="Source">local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="59">
        <Properties>
          <string name="Name">createElement.spec</string>
          <string name="Source">return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function()
		end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="60">
        <Properties>
          <string name="Name">createFragment</string>
          <string name="Source">local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="61">
        <Properties>
          <string name="Name">createFragment.spec</string>
          <string name="Source">return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({key = subFragment})

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="62">
        <Properties>
          <string name="Name">createReconciler</string>
          <string name="Source">local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and context from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parentContext = virtualNode.parentContext

		unmountVirtualNode(virtualNode)
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, parentContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(newElement, hostParent, concreteKey, virtualNode.context)

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		-- TODO: Consider reordering checks (https://github.com/Roblox/roact/issues/200)
		if renderResult == nil
			or typeof(renderResult) == "boolean"
			or Type.of(renderResult) == Type.Element
			or Type.of(renderResult) == Type.Fragment
		then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(("%s\n%s"):format(
				"Component returned invalid children:",
				virtualNode.currentElement.source or "&lt;enable element tracebacks>"
			), 0)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		local kind = ElementKind.of(virtualNode.currentElement)

		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			context = context,
			-- This copy of context is useful if the element gets replaced
			-- with an element of a different component type
			parentContext = context,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context)
		if config.internalTypeChecks then
			internalAssert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind), 2))
		end

		return virtualNode
	end

	reconciler = {
		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		isHostObject = renderer.isHostObject,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="63">
        <Properties>
          <string name="Name">createReconciler.spec</string>
          <string name="Source">return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()
			expect(next(node.children)).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i=1, totalElements do
				elements["key"..tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="64">
        <Properties>
          <string name="Name">createReconcilerCompat</string>
          <string name="Source">--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(virtualTree)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return virtualTree.mount(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return virtualTree.unmount(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return virtualTree.update(...)
	end

	return compat
end

return createReconcilerCompat</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="65">
        <Properties>
          <string name="Name">createReconcilerCompat.spec</string>
          <string name="Source">return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local VirtualTree = require(script.Parent.VirtualTree)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)

	local function mountWithNoop(element, hostParent, hostKey)
		return VirtualTree.mount(element, {
			hostParent = hostParent,
			hostKey = hostKey,
			reconciler = noopReconciler
		})
	end

	local compatReconciler = createReconcilerCompat({
		mount = mountWithNoop,
		unmount = VirtualTree.unmount,
		update = VirtualTree.update,
	})

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				VirtualTree.unmount(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			VirtualTree.unmount(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = mountWithNoop(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = mountWithNoop(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = mountWithNoop(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				VirtualTree.unmount(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = mountWithNoop(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			VirtualTree.unmount(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="66">
        <Properties>
          <string name="Name">createRef</string>
          <string name="Source">--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="67">
        <Properties>
          <string name="Name">createRef.spec</string>
          <string name="Source">return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="68">
        <Properties>
          <string name="Name">createSignal</string>
          <string name="Source">--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function addToMap(map, addKey, addValue)
	local new = {}

	for key, value in pairs(map) do
		new[key] = value
	end

	new[addKey] = addValue

	return new
end

local function removeFromMap(map, removeKey)
	local new = {}

	for key, value in pairs(map) do
		if key ~= removeKey then
			new[key] = value
		end
	end

	return new
end

local function createSignal()
	local connections = {}

	local function subscribe(self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
		}

		connections = addToMap(connections, callback, connection)

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections = removeFromMap(connections, callback)
		end

		return disconnect
	end

	local function fire(self, ...)
		for callback, connection in pairs(connections) do
			if not connection.disconnected then
				callback(...)
			end
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="69">
        <Properties>
          <string name="Name">createSignal.spec</string>
          <string name="Source">return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="70">
        <Properties>
          <string name="Name">createSpy</string>
          <string name="Source">--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {
		callCount = 0,
		values = {},
		valuesLength = 0,
	}

	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = {...}
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(
				self.valuesLength,
				len
			), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="71">
        <Properties>
          <string name="Name">createSpy.spec</string>
          <string name="Source">return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="72">
        <Properties>
          <string name="Name">deepEqual</string>
          <string name="Source">local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(
			typeof(a),
			typeof(b)
		)
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

return deepEqual</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="73">
        <Properties>
          <string name="Name">deepEqual.spec</string>
          <string name="Source">return function()
	local deepEqual = require(script.Parent.deepEqual)

	it("should compare non-table values using standard '==' equality", function()
		expect(deepEqual(1, 1)).to.equal(true)
		expect(deepEqual("hello", "hello")).to.equal(true)
		expect(deepEqual(nil, nil)).to.equal(true)

		local someFunction = function() end
		local theSameFunction = someFunction

		expect(deepEqual(someFunction, theSameFunction)).to.equal(true)

		local A = {
			foo = someFunction
		}
		local B = {
			foo = theSameFunction
		}

		expect(deepEqual(A, B)).to.equal(true)
	end)

	it("should fail with a message when args are not equal", function()
		local success, message = deepEqual(1, 2)

		expect(success).to.equal(false)
		expect(message:find("{1} ~= {2}")).to.be.ok()

		success, message = deepEqual({
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("{1}%[foo%] ~= {2}%[foo%]")).to.be.ok()
	end)

	it("should fail when types differ", function()
		local success, message = deepEqual(1, "1")

		expect(success).to.equal(false)
		expect(message:find("{1} is of type number, but {2} is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			}
		}

		deepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			}
		}

		local success, message = deepEqual(A, C)

		expect(success).to.equal(false)
		expect(message:find("{1}%[nested%]%[bar%] ~= {2}%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		expect(deepEqual(equalArgsA, equalArgsB)).to.equal(true)
		expect(deepEqual(equalArgsB, equalArgsA)).to.equal(true)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(deepEqual(equalArgsA, nonEqualArgs)).to.equal(false)
		expect(deepEqual(nonEqualArgs, equalArgsA)).to.equal(false)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="74">
        <Properties>
          <string name="Name">getDefaultInstanceProperty</string>
          <string name="Source">--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="75">
        <Properties>
          <string name="Name">getDefaultInstanceProperty.spec</string>
          <string name="Source">return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="76">
        <Properties>
          <string name="Name">init.spec</string>
          <string name="Source">return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. valueType
				local message = (
					"Expected public API member %q to be %s, but instead it was of type %s"
				):format(tostring(key), existence, typeof(Roact[key]))

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = (
					"Found unknown public API key %q!"
				):format(tostring(key))

				error(message)
			end
		end
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="77">
        <Properties>
          <string name="Name">internalAssert</string>
          <string name="Source">local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="78">
        <Properties>
          <string name="Name">invalidSetStateMessages</string>
          <string name="Source">--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="79">
        <Properties>
          <string name="Name">oneChild</string>
          <string name="Source">--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="80">
        <Properties>
          <string name="Name">oneChild.spec</string>
          <string name="Source">return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="81">
        <Properties>
          <string name="Name">shallow</string>
          <string name="Source">local Type = require(script.Parent.Type)
local ShallowWrapper = require(script.ShallowWrapper)
local validateShallowOptions = require(script.validateShallowOptions)

local function shallow(rootNode, options)
	assert(Type.of(rootNode) == Type.VirtualNode, "Expected arg #1 to be a VirtualNode")
	assert(validateShallowOptions(options))

	options = options or {}
	local maxDepth = options.depth or 1

	return ShallowWrapper.new(rootNode, maxDepth)
end

return shallow</string>
        </Properties>
        <Item class="ModuleScript" referent="82">
          <Properties>
            <string name="Name">ShallowWrapper</string>
            <string name="Source">local RoactRoot = script.Parent.Parent

local Children = require(RoactRoot.PropMarkers.Children)
local ElementKind = require(RoactRoot.ElementKind)
local ElementUtils = require(RoactRoot.ElementUtils)
local strict = require(RoactRoot.strict)
local Symbol = require(RoactRoot.Symbol)
local Snapshot = require(script.Parent.Snapshot)
local VirtualNodeConstraints = require(script.Parent.VirtualNodeConstraints)

local InternalData = Symbol.named("InternalData")

local ShallowWrapper = {}
local ShallowWrapperPublic = {}
local ShallowWrapperMetatable = {
	__index = ShallowWrapperPublic,
}

local function getTypeFromVirtualNode(virtualNode)
	local element = virtualNode.currentElement
	local kind = ElementKind.of(element)

	if kind == ElementKind.Host then
		return {
			kind = ElementKind.Host,
			className = element.component,
		}
	elseif kind == ElementKind.Function then
		return {
			kind = ElementKind.Function,
			functionComponent = element.component,
		}
	elseif kind == ElementKind.Stateful then
		return {
			kind = ElementKind.Stateful,
			component = element.component,
		}
	else
		error(("shallow wrapper does not support element of kind %q"):format(tostring(kind)))
	end
end

local function findNextVirtualNode(virtualNode, maxDepth)
	local currentDepth = 0
	local currentNode = virtualNode
	local nextNode = currentNode.children[ElementUtils.UseParentKey]

	while currentDepth &lt; maxDepth and nextNode ~= nil do
		currentNode = nextNode
		nextNode = currentNode.children[ElementUtils.UseParentKey]
		currentDepth = currentDepth + 1
	end

	return currentNode
end

local function getChildren(virtualNode, results, maxDepth)
	if ElementKind.of(virtualNode.currentElement) == ElementKind.Fragment then
		for _, subVirtualNode in pairs(virtualNode.children) do
			getChildren(subVirtualNode, results, maxDepth)
		end
	else
		local childWrapper = ShallowWrapper.new(
			virtualNode,
			maxDepth
		)

		table.insert(results, childWrapper)
	end
end

local function filterProps(props)
	if props[Children] == nil then
		return props
	end

	local filteredProps = {}

	for key, value in pairs(props) do
		if key ~= Children then
			filteredProps[key] = value
		end
	end

	return filteredProps
end

function ShallowWrapper.new(virtualNode, maxDepth)
	virtualNode = findNextVirtualNode(virtualNode, maxDepth)

	local internalData = {
		virtualNode = virtualNode,
		childrenMaxDepth = maxDepth - 1,
		virtualNodeChildren = maxDepth == 0 and {} or virtualNode.children,
		instance = virtualNode.hostObject,
	}

	local wrapper = {
		[InternalData] = internalData,
		type = getTypeFromVirtualNode(virtualNode),
		props = filterProps(virtualNode.currentElement.props),
		hostKey = virtualNode.hostKey,
		children = {},
	}

	for _, childVirtualNode in pairs(internalData.virtualNodeChildren) do
		getChildren(childVirtualNode, wrapper.children, internalData.childrenMaxDepth)
	end

	return setmetatable(wrapper, ShallowWrapperMetatable)
end

function ShallowWrapperPublic:find(constraints)
	VirtualNodeConstraints.validate(constraints)

	local results = {}

	for i=1, #self.children do
		local childWrapper = self.children[i]
		local childInternalData = childWrapper[InternalData]

		if VirtualNodeConstraints.satisfiesAll(childInternalData.virtualNode, constraints) then
			table.insert(results, childWrapper)
		end
	end

	return results
end

function ShallowWrapperPublic:findUnique(constraints)
	if constraints == nil then
		assert(
			#self.children == 1,
			("expect to contain exactly one child, but found %d"):format(#self.children)
		)
		return self.children[1]
	end

	local constrainedChildren = self:find(constraints)

	assert(
		#constrainedChildren == 1,
		("expect to find only one child, but found %d"):format(#constrainedChildren)
	)

	return constrainedChildren[1]
end

function ShallowWrapperPublic:getHostObject()
	local internalData = self[InternalData]

	return internalData.instance
end

function ShallowWrapperPublic:matchSnapshot(identifier)
	assert(typeof(identifier) == "string", "Snapshot identifier must be a string")

	local snapshotResult = Snapshot.createMatcher(identifier, self)

	snapshotResult:match()
end

function ShallowWrapperPublic:toSnapshotString()
	return Snapshot.toString(self)
end

strict(ShallowWrapperPublic, "ShallowWrapper")

return strict(ShallowWrapper, "ShallowWrapper")</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="83">
          <Properties>
            <string name="Name">ShallowWrapper.spec</string>
            <string name="Source">return function()
	local RoactRoot = script.Parent.Parent
	local ShallowWrapper = require(script.Parent.ShallowWrapper)

	local assertDeepEqual = require(RoactRoot.assertDeepEqual)
	local Children = require(RoactRoot.PropMarkers.Children)
	local ElementKind = require(RoactRoot.ElementKind)
	local createElement = require(RoactRoot.createElement)
	local createFragment = require(RoactRoot.createFragment)
	local createReconciler = require(RoactRoot.createReconciler)
	local RoactComponent = require(RoactRoot.Component)
	local RobloxRenderer = require(RoactRoot.RobloxRenderer)

	local robloxReconciler = createReconciler(RobloxRenderer)

	local function shallow(element, options)
		options = options or {}
		local maxDepth = options.depth or 1
		local hostKey = options.hostKey or "ShallowTree"
		local hostParent = options.hostParent or Instance.new("Folder")

		local virtualNode = robloxReconciler.mountVirtualNode(element, hostParent, hostKey)

		return ShallowWrapper.new(virtualNode, maxDepth)
	end

	describe("single host element", function()
		local className = "TextLabel"

		local function Component(props)
			return createElement(className, props)
		end

		it("should have it's type.kind to Host", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.kind).to.equal(ElementKind.Host)
		end)

		it("should have its type.className to given instance class", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.className).to.equal(className)
		end)

		it("children count should be zero", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(#result.children).to.equal(0)
		end)
	end)

	describe("single function element", function()
		local function FunctionComponent(props)
			return createElement("TextLabel")
		end

		local function Component(props)
			return createElement(FunctionComponent, props)
		end

		it("should have its type.kind to Function", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.kind).to.equal(ElementKind.Function)
		end)

		it("should have its type.functionComponent to Function", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.functionComponent).to.equal(FunctionComponent)
		end)
	end)

	describe("single stateful element", function()
		local StatefulComponent = RoactComponent:extend("StatefulComponent")

		function StatefulComponent:render()
			return createElement("TextLabel")
		end

		local function Component(props)
			return createElement(StatefulComponent, props)
		end

		it("should have its type.kind to Stateful", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.kind).to.equal(ElementKind.Stateful)
		end)

		it("should have its type.component to given component class", function()
			local element = createElement(Component)

			local result = shallow(element)

			expect(result.type.component).to.equal(StatefulComponent)
		end)
	end)

	describe("depth", function()
		local unwrappedClassName = "TextLabel"
		local function A(props)
			return createElement(unwrappedClassName)
		end

		local function B(props)
			return createElement(A)
		end

		local function Component(props)
			return createElement(B)
		end

		local function ComponentWithChildren(props)
			return createElement("Frame", {}, {
				ChildA = createElement(A),
				ChildB = createElement(B),
			})
		end

		it("should unwrap function components when depth has not exceeded", function()
			local element = createElement(Component)

			local result = shallow(element, {
				depth = 3,
			})

			expect(result.type.kind).to.equal(ElementKind.Host)
			expect(result.type.className).to.equal(unwrappedClassName)
		end)

		it("should stop unwrapping function components when depth has exceeded", function()
			local element = createElement(Component)

			local result = shallow(element, {
				depth = 2,
			})

			expect(result.type.kind).to.equal(ElementKind.Function)
			expect(result.type.functionComponent).to.equal(A)
		end)

		it("should not unwrap the element when depth is zero", function()
			local element = createElement(Component)

			local result = shallow(element, {
				depth = 0,
			})

			expect(result.type.kind).to.equal(ElementKind.Function)
			expect(result.type.functionComponent).to.equal(Component)
		end)

		it("should not unwrap children when depth is one", function()
			local element = createElement(ComponentWithChildren)

			local result = shallow(element, {
				depth = 1,
			})

			local childA = result:find({
				component = A,
			})
			expect(#childA).to.equal(1)

			local childB = result:find({
				component = B,
			})
			expect(#childB).to.equal(1)
		end)

		it("should unwrap children when depth is two", function()
			local element = createElement(ComponentWithChildren)

			local result = shallow(element, {
				depth = 2,
			})

			local hostChild = result:find({
				component = unwrappedClassName,
			})
			expect(#hostChild).to.equal(1)

			local unwrappedBChild = result:find({
				component = A,
			})
			expect(#unwrappedBChild).to.equal(1)
		end)

		it("should not include any children when depth is zero", function()
			local element = createElement(ComponentWithChildren)

			local result = shallow(element, {
				depth = 0,
			})

			expect(#result.children).to.equal(0)
		end)

		it("should not include any grand-children when depth is one", function()
			local function ParentComponent()
				return createElement("Folder", {}, {
					Child = createElement(ComponentWithChildren),
				})
			end

			local element = createElement(ParentComponent)

			local result = shallow(element, {
				depth = 1,
			})

			expect(#result.children).to.equal(1)

			local componentWithChildrenWrapper = result:find({
				component = ComponentWithChildren,
			})[1]
			expect(componentWithChildrenWrapper).to.be.ok()

			expect(#componentWithChildrenWrapper.children).to.equal(0)
		end)
	end)

	describe("children count", function()
		local childClassName = "TextLabel"

		local function Component(props)
			local children = {}

			for i=1, props.childrenCount do
				children[("Key%d"):format(i)] = createElement(childClassName)
			end

			return createElement("Frame", {}, children)
		end

		it("should have 1 child when the element contains only one element", function()
			local element = createElement(Component, {
				childrenCount = 1,
			})

			local result = shallow(element)

			expect(#result.children).to.equal(1)
		end)

		it("should not have any children when the element does not contain elements", function()
			local element = createElement(Component, {
				childrenCount = 0,
			})

			local result = shallow(element)

			expect(#result.children).to.equal(0)
		end)

		it("should count children in a fragment", function()
			local element = createElement("Frame", {}, {
				Frag = createFragment({
					Label = createElement("TextLabel"),
					Button = createElement("TextButton"),
				})
			})

			local result = shallow(element)

			expect(#result.children).to.equal(2)
		end)

		it("should count children nested in fragments", function()
			local element = createElement("Frame", {}, {
				Frag = createFragment({
					SubFrag = createFragment({
						Frame = createElement("Frame"),
					}),
					Label = createElement("TextLabel"),
					Button = createElement("TextButton"),
				})
			})

			local result = shallow(element)

			expect(#result.children).to.equal(3)
		end)
	end)

	describe("props", function()
		it("should contains the same props using Host element", function()
			local function Component(props)
				return createElement("Frame", props)
			end

			local props = {
				BackgroundTransparency = 1,
				Visible = false,
			}
			local element = createElement(Component, props)

			local result = shallow(element)

			expect(result.type.kind).to.equal(ElementKind.Host)
			expect(result.props).to.be.ok()

			assertDeepEqual(props, result.props)
		end)

		it("should have the same props using function element", function()
			local function ChildComponent(props)
				return createElement("Frame", props)
			end

			local function Component(props)
				return createElement(ChildComponent, props)
			end

			local props = {
				BackgroundTransparency = 1,
				Visible = false,
			}
			local propsCopy = {}
			for key, value in pairs(props) do
				propsCopy[key] = value
			end
			local element = createElement(Component, props)

			local result = shallow(element)

			expect(result.type.kind).to.equal(ElementKind.Function)
			expect(result.props).to.be.ok()

			assertDeepEqual(propsCopy, result.props)
		end)

		it("should not have the children property", function()
			local function ComponentWithChildren(props)
				return createElement("Frame", props, {
					Key = createElement("TextLabel"),
				})
			end

			local props = {
				BackgroundTransparency = 1,
				Visible = false,
			}

			local element = createElement(ComponentWithChildren, props)

			local result = shallow(element)

			expect(result.props).to.be.ok()
			expect(result.props[Children]).never.to.be.ok()
		end)

		it("should have the inherited props", function()
			local function Component(props)
				local frameProps = {
					LayoutOrder = 7,
				}
				for key, value in pairs(props) do
					frameProps[key] = value
				end

				return createElement("Frame", frameProps)
			end

			local element = createElement(Component, {
				BackgroundTransparency = 1,
				Visible = false,
			})

			local result = shallow(element)

			expect(result.props).to.be.ok()

			local expectProps = {
				BackgroundTransparency = 1,
				Visible = false,
				LayoutOrder = 7,
			}

			assertDeepEqual(expectProps, result.props)
		end)
	end)

	describe("getHostObject", function()
		it("should return the instance when it is a host component", function()
			local className = "Frame"
			local function Component(props)
				return createElement(className)
			end

			local element = createElement(Component)
			local wrapper = shallow(element)

			local instance = wrapper:getHostObject()

			expect(instance).to.be.ok()
			expect(instance.ClassName).to.equal(className)
		end)

		it("should return nil if it is a function component", function()
			local function Child()
				return createElement("Frame")
			end
			local function Component(props)
				return createElement(Child)
			end

			local element = createElement(Component)
			local wrapper = shallow(element)

			local instance = wrapper:getHostObject()

			expect(instance).never.to.be.ok()
		end)
	end)

	describe("find children", function()
		it("should throw if the constraint does not exist", function()
			local element = createElement("Frame")

			local result = shallow(element)

			local function findWithInvalidConstraint()
				result:find({
					nothing = false,
				})
			end

			expect(findWithInvalidConstraint).to.throw()
		end)

		it("should return children that matches all contraints", function()
			local function ComponentWithChildren()
				return createElement("Frame", {}, {
					ChildA = createElement("TextLabel", {
						Visible = false,
					}),
					ChildB = createElement("TextButton", {
						Visible = false,
					}),
				})
			end

			local element = createElement(ComponentWithChildren)

			local result = shallow(element)

			local children = result:find({
				className = "TextLabel",
				props = {
					Visible = false,
				},
			})

			expect(#children).to.equal(1)
		end)

		it("should return children from fragments", function()
			local childClassName = "TextLabel"

			local function ComponentWithFragment()
				return createElement("Frame", {}, {
					Fragment = createFragment({
						Child = createElement(childClassName),
					}),
				})
			end

			local element = createElement(ComponentWithFragment)

			local result = shallow(element)

			local children = result:find({
				className = childClassName
			})

			expect(#children).to.equal(1)
		end)

		it("should return children from nested fragments", function()
			local childClassName = "TextLabel"

			local function ComponentWithFragment()
				return createElement("Frame", {}, {
					Fragment = createFragment({
						SubFragment = createFragment({
							Child = createElement(childClassName),
						}),
					}),
				})
			end

			local element = createElement(ComponentWithFragment)

			local result = shallow(element)

			local children = result:find({
				className = childClassName
			})

			expect(#children).to.equal(1)
		end)
	end)

	describe("findUnique", function()
		it("should return the only child when no constraints are given", function()
			local element = createElement("Frame", {}, {
				Child = createElement("TextLabel"),
			})

			local result = shallow(element)

			local child = result:findUnique()

			expect(child.type.kind).to.equal(ElementKind.Host)
			expect(child.type.className).to.equal("TextLabel")
		end)

		it("should return the only child that satifies the constraint", function()
			local element = createElement("Frame", {}, {
				ChildA = createElement("TextLabel"),
				ChildB = createElement("TextButton"),
			})

			local result = shallow(element)

			local child = result:findUnique({
				className = "TextLabel",
			})

			expect(child.type.className).to.equal("TextLabel")
		end)

		it("should throw if there is not any child element", function()
			local element = createElement("Frame")

			local result = shallow(element)

			local function shouldThrow()
				result:findUnique()
			end

			expect(shouldThrow).to.throw()
		end)

		it("should throw if more than one child satisfies the constraint", function()
			local element = createElement("Frame", {}, {
				ChildA = createElement("TextLabel"),
				ChildB = createElement("TextLabel"),
			})

			local result = shallow(element)

			local function shouldThrow()
				result:findUnique({
					className = "TextLabel",
				})
			end

			expect(shouldThrow).to.throw()
		end)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="84">
          <Properties>
            <string name="Name">Snapshot</string>
            <string name="Source">local Serialize = require(script.Serialize)
local SnapshotMatcher = require(script.SnapshotMatcher)

local characterClass = "%w_%-%."
local identifierPattern = "^[" .. characterClass .. "]+$"
local invalidPattern = "[^" .. characterClass .. "]"

local function createMatcher(identifier, shallowWrapper)
	if not identifier:match(identifierPattern) then
		error(("Snapshot identifier has invalid character: %q"):format(identifier:match(invalidPattern)))
	end

	local snapshot = Serialize.wrapperToSnapshot(shallowWrapper)
	local matcher = SnapshotMatcher.new(identifier, snapshot)

	return matcher
end

local function toString(shallowWrapper)
	local snapshot = Serialize.wrapperToSnapshot(shallowWrapper)

	return Serialize.snapshotToString(snapshot)
end

return {
	createMatcher = createMatcher,
	toString = toString,
}</string>
          </Properties>
          <Item class="ModuleScript" referent="85">
            <Properties>
              <string name="Name">Serialize</string>
              <string name="Source"><![CDATA[local Serializer = require(script.Serializer)
local Snapshot = require(script.Snapshot)

return {
	wrapperToSnapshot = function(wrapper)
		return Snapshot.new(wrapper)
	end,
	snapshotToString = function(snapshot)
		return Serializer.firstSnapshotData(snapshot)
	end,
}
]]></string>
            </Properties>
            <Item class="ModuleScript" referent="86">
              <Properties>
                <string name="Name">IndentedOutput</string>
                <string name="Source"><![CDATA[local IndentedOutput = {}
local IndentedOutputMetatable = {
	__index = IndentedOutput,
}

function IndentedOutput.new(indentation)
	indentation = indentation or 2

	local output = {
		_level = 0,
		_indentation = (" "):rep(indentation),
		_lines = {},
	}

	setmetatable(output, IndentedOutputMetatable)

	return output
end

function IndentedOutput:write(line, ...)
	if select("#", ...) > 0 then
		line = line:format(...)
	end

	local indentedLine = ("%s%s"):format(self._indentation:rep(self._level), line)

	table.insert(self._lines, indentedLine)
end

function IndentedOutput:push()
	self._level = self._level + 1
end

function IndentedOutput:pop()
	self._level = math.max(self._level - 1, 0)
end

function IndentedOutput:writeAndPush(...)
	self:write(...)
	self:push()
end

function IndentedOutput:popAndWrite(...)
	self:pop()
	self:write(...)
end

function IndentedOutput:join(separator)
	separator = separator or "\n"

	return table.concat(self._lines, separator)
end

return IndentedOutput
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="87">
              <Properties>
                <string name="Name">IndentedOutput.spec</string>
                <string name="Source">return function()
	local IndentedOutput = require(script.Parent.IndentedOutput)

	describe("join", function()
		it("should concat the lines with a new line by default", function()
			local output = IndentedOutput.new()

			output:write("foo")
			output:write("bar")

			expect(output:join()).to.equal("foo\nbar")
		end)

		it("should concat the lines with the given string", function()
			local output = IndentedOutput.new()

			output:write("foo")
			output:write("bar")

			expect(output:join("-")).to.equal("foo-bar")
		end)
	end)

	describe("push", function()
		it("should indent next written lines", function()
			local output = IndentedOutput.new()

			output:write("foo")
			output:push()
			output:write("bar")

			expect(output:join()).to.equal("foo\n  bar")
		end)
	end)

	describe("pop", function()
		it("should dedent next written lines", function()
			local output = IndentedOutput.new()

			output:write("foo")
			output:push()
			output:write("bar")
			output:pop()
			output:write("baz")

			expect(output:join()).to.equal("foo\n  bar\nbaz")
		end)
	end)

	describe("writeAndPush", function()
		it("should write the line and push", function()
			local output = IndentedOutput.new()

			output:writeAndPush("foo")
			output:write("bar")

			expect(output:join()).to.equal("foo\n  bar")
		end)
	end)

	describe("popAndWrite", function()
		it("should write the line and push", function()
			local output = IndentedOutput.new()

			output:writeAndPush("foo")
			output:write("bar")
			output:popAndWrite("baz")

			expect(output:join()).to.equal("foo\n  bar\nbaz")
		end)
	end)
end</string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="88">
              <Properties>
                <string name="Name">Markers</string>
                <string name="Source">local RoactRoot = script.Parent.Parent.Parent.Parent

local strict = require(RoactRoot.strict)

return strict({
	AnonymousFunction = require(script.AnonymousFunction),
	EmptyRef = require(script.EmptyRef),
	Signal = require(script.Signal),
	Unknown = require(script.Unknown),
}, "Markers")</string>
              </Properties>
              <Item class="ModuleScript" referent="89">
                <Properties>
                  <string name="Name">AnonymousFunction</string>
                  <string name="Source">local RoactRoot = script.Parent.Parent.Parent.Parent.Parent

local Symbol = require(RoactRoot.Symbol)

local AnonymousFunction = Symbol.named("AnonymousFunction")

return AnonymousFunction</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="90">
                <Properties>
                  <string name="Name">EmptyRef</string>
                  <string name="Source">local RoactRoot = script.Parent.Parent.Parent.Parent.Parent

local Symbol = require(RoactRoot.Symbol)

local EmptyRef = Symbol.named("EmptyRef")

return EmptyRef</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="91">
                <Properties>
                  <string name="Name">Signal</string>
                  <string name="Source">local RoactRoot = script.Parent.Parent.Parent.Parent.Parent

local Symbol = require(RoactRoot.Symbol)

local Signal = Symbol.named("Signal")

return Signal</string>
                </Properties>
              </Item>
              <Item class="ModuleScript" referent="92">
                <Properties>
                  <string name="Name">Unknown</string>
                  <string name="Source">local RoactRoot = script.Parent.Parent.Parent.Parent.Parent

local Symbol = require(RoactRoot.Symbol)

local Unkown = Symbol.named("Unkown")

return Unkown</string>
                </Properties>
              </Item>
            </Item>
            <Item class="ModuleScript" referent="93">
              <Properties>
                <string name="Name">Serializer</string>
                <string name="Source"><![CDATA[local RoactRoot = script.Parent.Parent.Parent.Parent

local ElementKind = require(RoactRoot.ElementKind)
local Ref = require(RoactRoot.PropMarkers.Ref)
local Type = require(RoactRoot.Type)
local Markers = require(script.Parent.Markers)
local IndentedOutput = require(script.Parent.IndentedOutput)

local Serializer = {}

function Serializer.kind(kind)
	if kind == ElementKind.Host then
		return "Host"
	elseif kind == ElementKind.Function then
		return "Function"
	elseif kind == ElementKind.Stateful then
		return "Stateful"
	else
		error(("Cannot serialize ElementKind %q"):format(tostring(kind)))
	end
end

function Serializer.type(data, output)
	output:writeAndPush("type = {")
	output:write("kind = ElementKind.%s,", Serializer.kind(data.kind))

	if data.className then
		output:write("className = %q,", data.className)
	elseif data.componentName then
		output:write("componentName = %q,", data.componentName)
	end

	output:popAndWrite("},")
end

function Serializer.tableKey(key)
	local keyType = type(key)

	if keyType == "string" and key:match("^%a%w+$") then
		return key
	else
		return ("[%s]"):format(Serializer.tableValue(key))
	end
end

function Serializer.number(value)
	local _, fraction = math.modf(value)

	if fraction == 0 then
		return ("%s"):format(tostring(value))
	else
		return ("%0.7f"):format(value):gsub("%.?0+$", "")
	end
end

function Serializer.tableValue(value)
	local valueType = typeof(value)

	if valueType == "string" then
		return ("%q"):format(value)

	elseif valueType == "number" then
		return Serializer.number(value)

	elseif valueType == "boolean" then
		return ("%s"):format(tostring(value))

	elseif valueType == "Color3" then
		return ("Color3.new(%s, %s, %s)"):format(
			Serializer.number(value.r),
			Serializer.number(value.g),
			Serializer.number(value.b)
		)

	elseif valueType == "EnumItem" then
		return ("%s"):format(tostring(value))

	elseif valueType == "Rect" then
		return ("Rect.new(%s, %s, %s, %s)"):format(
			Serializer.number(value.Min.X),
			Serializer.number(value.Min.Y),
			Serializer.number(value.Max.X),
			Serializer.number(value.Max.Y)
		)

	elseif valueType == "UDim" then
		return ("UDim.new(%s, %d)"):format(Serializer.number(value.Scale), value.Offset)

	elseif valueType == "UDim2" then
		return ("UDim2.new(%s, %d, %s, %d)"):format(
			Serializer.number(value.X.Scale),
			value.X.Offset,
			Serializer.number(value.Y.Scale),
			value.Y.Offset
		)

	elseif valueType == "Vector2" then
		return ("Vector2.new(%s, %s)"):format(
			Serializer.number(value.X),
			Serializer.number(value.Y)
		)

	elseif Type.of(value) == Type.HostEvent then
		return ("Roact.Event.%s"):format(value.name)

	elseif Type.of(value) == Type.HostChangeEvent then
		return ("Roact.Change.%s"):format(value.name)

	elseif value == Ref then
		return "Roact.Ref"

	else
		for markerName, marker in pairs(Markers) do
			if value == marker then
				return ("Markers.%s"):format(markerName)
			end
		end

		error(("Cannot serialize value %q of type %q"):format(
			tostring(value),
			valueType
		))
	end
end

function Serializer.getKeyTypeOrder(key)
	if type(key) == "string" then
		return 1
	elseif Type.of(key) == Type.HostEvent then
		return 2
	elseif Type.of(key) == Type.HostChangeEvent then
		return 3
	elseif key == Ref then
		return 4
	else
		return math.huge
	end
end

function Serializer.compareKeys(a, b)
	-- a and b are of the same type here, because Serializer.sortTableKeys
	-- will only use this function to compare keys of the same type
	if Type.of(a) == Type.HostEvent or Type.of(a) == Type.HostChangeEvent then
		return a.name < b.name
	else
		return a < b
	end
end

function Serializer.sortTableKeys(a, b)
	-- first sort by the type of key, to place string props, then Roact.Event
	-- events, Roact.Change events and the Ref
	local orderA = Serializer.getKeyTypeOrder(a)
	local orderB = Serializer.getKeyTypeOrder(b)

	if orderA == orderB then
		return Serializer.compareKeys(a, b)
	else
		return orderA < orderB
	end
end

function Serializer.table(tableKey, dict, output)
	if next(dict) == nil then
		output:write("%s = {},", tableKey)
		return
	end

	output:writeAndPush("%s = {", tableKey)

	local keys = {}

	for key in pairs(dict) do
		table.insert(keys, key)
	end

	table.sort(keys, Serializer.sortTableKeys)

	for i=1, #keys do
		local key = keys[i]
		local value = dict[key]
		local serializedKey = Serializer.tableKey(key)

		if type(value) == "table" then
			Serializer.table(serializedKey, value, output)
		else
			output:write("%s = %s,", serializedKey, Serializer.tableValue(value))
		end
	end

	output:popAndWrite("},")
end

function Serializer.props(props, output)
	Serializer.table("props", props, output)
end

function Serializer.children(children, output)
	if #children == 0 then
		output:write("children = {},")
		return
	end

	output:writeAndPush("children = {")

	for i=1, #children do
		Serializer.snapshotData(children[i], output)
	end

	output:popAndWrite("},")
end

function Serializer.snapshotDataContent(snapshotData, output, skipHostKey)
	Serializer.type(snapshotData.type, output)

	if not skipHostKey then
		output:write("hostKey = %q,", snapshotData.hostKey)
	end

	Serializer.props(snapshotData.props, output)
	Serializer.children(snapshotData.children, output)
end

function Serializer.snapshotData(snapshotData, output, skipHostKey)
	output:writeAndPush("{")
	Serializer.snapshotDataContent(snapshotData, output)
	output:popAndWrite("},")
end

function Serializer.firstSnapshotData(snapshotData)
	local output = IndentedOutput.new()
	output:writeAndPush("return function(dependencies)")
	output:write("local Roact = dependencies.Roact")
	output:write("local ElementKind = dependencies.ElementKind")
	output:write("local Markers = dependencies.Markers")
	output:write("")
	output:writeAndPush("return {")

	Serializer.snapshotDataContent(snapshotData, output, true)

	output:popAndWrite("}")
	output:popAndWrite("end")

	return output:join()
end

return Serializer
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="94">
              <Properties>
                <string name="Name">Serializer.spec</string>
                <string name="Source">return function()
	local RoactRoot = script.Parent.Parent.Parent.Parent

	local Markers = require(script.Parent.Markers)
	local Change = require(RoactRoot.PropMarkers.Change)
	local Event = require(RoactRoot.PropMarkers.Event)
	local ElementKind = require(RoactRoot.ElementKind)
	local IndentedOutput = require(script.Parent.IndentedOutput)
	local Ref = require(RoactRoot.PropMarkers.Ref)
	local Serializer = require(script.Parent.Serializer)

	describe("type", function()
		it("should serialize host elements", function()
			local output = IndentedOutput.new()
			Serializer.type({
				kind = ElementKind.Host,
				className = "TextLabel",
			}, output)

			expect(output:join()).to.equal(
				   "type = {\n"
				.. "  kind = ElementKind.Host,\n"
				.. "  className = \"TextLabel\",\n"
				.. "},"
			)
		end)

		it("should serialize stateful elements", function()
			local output = IndentedOutput.new()
			Serializer.type({
				kind = ElementKind.Stateful,
				componentName = "SomeComponent",
			}, output)

			expect(output:join()).to.equal(
				   "type = {\n"
				.. "  kind = ElementKind.Stateful,\n"
				.. "  componentName = \"SomeComponent\",\n"
				.. "},"
			)
		end)

		it("should serialize function elements", function()
			local output = IndentedOutput.new()
			Serializer.type({
				kind = ElementKind.Function,
			}, output)

			expect(output:join()).to.equal(
				   "type = {\n"
				.. "  kind = ElementKind.Function,\n"
				.. "},"
			)
		end)
	end)

	describe("tableKey", function()
		it("should serialize to a named dictionary field", function()
			local keys = {"foo", "foo1"}

			for i=1, #keys do
				local key = keys[i]
				local result = Serializer.tableKey(key)

				expect(result).to.equal(key)
			end
		end)

		it("should serialize to a string value field to escape non-alphanumeric characters", function()
			local keys = {"foo.bar", "1foo"}

			for i=1, #keys do
				local key = keys[i]
				local result = Serializer.tableKey(key)

				expect(result).to.equal('["' .. key .. '"]')
			end
		end)
	end)

	describe("number", function()
		it("should format integers", function()
			expect(Serializer.number(1)).to.equal("1")
			expect(Serializer.number(0)).to.equal("0")
			expect(Serializer.number(10)).to.equal("10")
		end)

		it("should minimize floating points zeros", function()
			expect(Serializer.number(1.2)).to.equal("1.2")
			expect(Serializer.number(0.002)).to.equal("0.002")
			expect(Serializer.number(5.5001)).to.equal("5.5001")
		end)

		it("should keep only 7 decimals", function()
			expect(Serializer.number(0.123456789)).to.equal("0.1234568")
			expect(Serializer.number(0.123456709)).to.equal("0.1234567")
		end)
	end)

	describe("tableValue", function()
		it("should serialize strings", function()
			local result = Serializer.tableValue("foo")

			expect(result).to.equal('"foo"')
		end)

		it("should serialize strings with \"", function()
			local result = Serializer.tableValue('foo"bar')

			expect(result).to.equal('"foo\\"bar"')
		end)

		it("should serialize numbers", function()
			local result = Serializer.tableValue(10.5)

			expect(result).to.equal("10.5")
		end)

		it("should serialize booleans", function()
			expect(Serializer.tableValue(true)).to.equal("true")
			expect(Serializer.tableValue(false)).to.equal("false")
		end)

		it("should serialize enum items", function()
			local result = Serializer.tableValue(Enum.SortOrder.LayoutOrder)

			expect(result).to.equal("Enum.SortOrder.LayoutOrder")
		end)

		it("should serialize Color3", function()
			local result = Serializer.tableValue(Color3.new(0.1, 0.2, 0.3))

			expect(result).to.equal("Color3.new(0.1, 0.2, 0.3)")
		end)

		it("should serialize Rect", function()
			local result = Serializer.tableValue(Rect.new(0.1, 0.2, 0.3, 0.4))

			expect(result).to.equal("Rect.new(0.1, 0.2, 0.3, 0.4)")
		end)

		it("should serialize UDim", function()
			local result = Serializer.tableValue(UDim.new(1.2, 0))

			expect(result).to.equal("UDim.new(1.2, 0)")
		end)

		it("should serialize UDim2", function()
			local result = Serializer.tableValue(UDim2.new(1.5, 5, 2, 3))

			expect(result).to.equal("UDim2.new(1.5, 5, 2, 3)")
		end)

		it("should serialize Vector2", function()
			local result = Serializer.tableValue(Vector2.new(1.5, 0.3))

			expect(result).to.equal("Vector2.new(1.5, 0.3)")
		end)

		it("should serialize markers symbol", function()
			for name, marker in pairs(Markers) do
				local result = Serializer.tableValue(marker)

				expect(result).to.equal(("Markers.%s"):format(name))
			end
		end)

		it("should serialize Roact.Event events", function()
			local result = Serializer.tableValue(Event.Activated)

			expect(result).to.equal("Roact.Event.Activated")
		end)

		it("should serialize Roact.Change events", function()
			local result = Serializer.tableValue(Change.AbsoluteSize)

			expect(result).to.equal("Roact.Change.AbsoluteSize")
		end)
	end)

	describe("table", function()
		it("should serialize an empty nested table", function()
			local output = IndentedOutput.new()
			Serializer.table("sub", {}, output)

			expect(output:join()).to.equal("sub = {},")
		end)

		it("should serialize an nested table", function()
			local output = IndentedOutput.new()
			Serializer.table("sub", {
				foo = 1,
			}, output)

			expect(output:join()).to.equal("sub = {\n  foo = 1,\n},")
		end)
	end)

	describe("props", function()
		it("should serialize an empty table", function()
			local output = IndentedOutput.new()
			Serializer.props({}, output)

			expect(output:join()).to.equal("props = {},")
		end)

		it("should serialize table fields", function()
			local output = IndentedOutput.new()
			Serializer.props({
				key = 8,
			}, output)

			expect(output:join()).to.equal("props = {\n  key = 8,\n},")
		end)

		it("should serialize Roact.Event", function()
			local output = IndentedOutput.new()
			Serializer.props({
				[Event.Activated] = Markers.AnonymousFunction,
			}, output)

			expect(output:join()).to.equal(
				   "props = {\n"
				.. "  [Roact.Event.Activated] = Markers.AnonymousFunction,\n"
				.. "},"
			)
		end)

		it("should sort Roact.Event", function()
			local output = IndentedOutput.new()
			Serializer.props({
				[Event.Activated] = Markers.AnonymousFunction,
				[Event.MouseEnter] = Markers.AnonymousFunction,
			}, output)

			expect(output:join()).to.equal(
				   "props = {\n"
				.. "  [Roact.Event.Activated] = Markers.AnonymousFunction,\n"
				.. "  [Roact.Event.MouseEnter] = Markers.AnonymousFunction,\n"
				.. "},"
			)
		end)

		it("should serialize Roact.Change", function()
			local output = IndentedOutput.new()
			Serializer.props({
				[Change.Position] = Markers.AnonymousFunction,
			}, output)

			expect(output:join()).to.equal(
				   "props = {\n"
				.. "  [Roact.Change.Position] = Markers.AnonymousFunction,\n"
				.. "},"
			)
		end)

		it("should sort props, Roact.Event, Roact.Change and Ref", function()
			local output = IndentedOutput.new()
			Serializer.props({
				foo = 1,
				[Event.Activated] = Markers.AnonymousFunction,
				[Change.Position] = Markers.AnonymousFunction,
				[Ref] = Markers.EmptyRef,
			}, output)

			expect(output:join()).to.equal(
				   "props = {\n"
				.. "  foo = 1,\n"
				.. "  [Roact.Event.Activated] = Markers.AnonymousFunction,\n"
				.. "  [Roact.Change.Position] = Markers.AnonymousFunction,\n"
				.. "  [Roact.Ref] = Markers.EmptyRef,\n"
				.. "},"
			)
		end)

		it("should sort props within themselves", function()
			local output = IndentedOutput.new()
			Serializer.props({
				foo = 1,
				bar = 2,
			}, output)

			expect(output:join()).to.equal(
				   "props = {\n"
				.. "  bar = 2,\n"
				.. "  foo = 1,\n"
				.. "},"
			)
		end)
	end)

	describe("children", function()
		it("should serialize an empty table", function()
			local output = IndentedOutput.new()
			Serializer.children({}, output)

			expect(output:join()).to.equal("children = {},")
		end)

		it("should serialize children in an array", function()
			local snapshotData = {
				type = {
					kind = ElementKind.Function,
				},
				hostKey = "HostKey",
				props = {},
				children = {},
			}

			local childrenOutput = IndentedOutput.new()
			Serializer.children({snapshotData}, childrenOutput)

			local snapshotDataOutput = IndentedOutput.new()
			snapshotDataOutput:push()
			Serializer.snapshotData(snapshotData, snapshotDataOutput)

			local expectResult = "children = {\n" .. snapshotDataOutput:join() .. "\n},"
			expect(childrenOutput:join()).to.equal(expectResult)
		end)
	end)

	describe("snapshotDataContent", function()
		it("should serialize all fields", function()
			local snapshotData = {
				type = {
					kind = ElementKind.Function,
				},
				hostKey = "HostKey",
				props = {},
				children = {},
			}
			local output = IndentedOutput.new()
			Serializer.snapshotDataContent(snapshotData, output)

			expect(output:join()).to.equal(
				   "type = {\n"
				.. "  kind = ElementKind.Function,\n"
				.. "},\n"
				.. 'hostKey = "HostKey",\n'
				.. "props = {},\n"
				.. "children = {},"
			)
		end)
	end)

	describe("snapshotData", function()
		it("should wrap snapshotDataContent result between curly braces", function()
			local snapshotData = {
				type = {
					kind = ElementKind.Function,
				},
				hostKey = "HostKey",
				props = {},
				children = {},
			}
			local contentOutput = IndentedOutput.new()
			contentOutput:push()
			Serializer.snapshotDataContent(snapshotData, contentOutput)

			local output = IndentedOutput.new()
			Serializer.snapshotData(snapshotData, output)

			local expectResult = "{\n" .. contentOutput:join() .. "\n},"
			expect(output:join()).to.equal(expectResult)
		end)
	end)

	describe("firstSnapshotData", function()
		it("should return a function that returns a table", function()
			local result = Serializer.firstSnapshotData({
				type = {
					kind = ElementKind.Function,
				},
				hostKey = "HostKey",
				props = {},
				children = {},
			})

			local pattern = "^return function%(.-%).+return%s+{(.+)}%s+end$"
			expect(result:match(pattern)).to.be.ok()
		end)
	end)
end</string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="95">
              <Properties>
                <string name="Name">Snapshot</string>
                <string name="Source"><![CDATA[local RoactRoot = script.Parent.Parent.Parent.Parent

local Markers = require(script.Parent.Markers)
local ElementKind = require(RoactRoot.ElementKind)
local Type = require(RoactRoot.Type)
local Ref = require(RoactRoot.PropMarkers.Ref)

local function sortSerializedChildren(childA, childB)
	return childA.hostKey < childB.hostKey
end

local Snapshot = {}

function Snapshot.type(wrapperType)
	local typeData = {
		kind = wrapperType.kind,
	}

	if wrapperType.kind == ElementKind.Host then
		typeData.className = wrapperType.className
	elseif wrapperType.kind == ElementKind.Stateful then
		typeData.componentName = tostring(wrapperType.component)
	end

	return typeData
end

function Snapshot.signal(signal)
	local signalToString = tostring(signal)
	local signalName = signalToString:match("Signal (%w+)")

	assert(signalName ~= nil, ("Can not extract signal name from %q"):format(signalToString))

	return {
		[Markers.Signal] = signalName
	}
end

function Snapshot.propValue(prop)
	local propType = type(prop)

	if propType == "string"
		or propType == "number"
		or propType == "boolean"
	then
		return prop

	elseif propType == "function" then
		return Markers.AnonymousFunction

	elseif typeof(prop) == "RBXScriptSignal" then
		return Snapshot.signal(prop)

	elseif propType == "userdata" then
		return prop

	elseif propType == "table" then
		return Snapshot.props(prop)

	else
		warn(("Snapshot does not support prop with value %q (type %q)"):format(
			tostring(prop),
			propType
		))
		return Markers.Unknown
	end
end

function Snapshot.props(wrapperProps)
	local serializedProps = {}

	for key, prop in pairs(wrapperProps) do
		if type(key) == "string"
			or Type.of(key) == Type.HostChangeEvent
			or Type.of(key) == Type.HostEvent
		then
			serializedProps[key] = Snapshot.propValue(prop)

		elseif key == Ref then
			local current = prop:getValue()

			if current then
				serializedProps[key] = {
					className = current.ClassName,
				}
			else
				serializedProps[key] = Markers.EmptyRef
			end

		else
			error(("Snapshot does not support prop with key %q (type: %s)"):format(
				tostring(key),
				type(key)
			))
		end
	end

	return serializedProps
end

function Snapshot.children(children)
	local serializedChildren = {}

	for i=1, #children do
		local childWrapper = children[i]

		serializedChildren[i] = Snapshot.child(childWrapper)
	end

	table.sort(serializedChildren, sortSerializedChildren)

	return serializedChildren
end

function Snapshot.child(wrapper)
	return {
		type = Snapshot.type(wrapper.type),
		hostKey = wrapper.hostKey,
		props = Snapshot.props(wrapper.props),
		children = Snapshot.children(wrapper.children),
	}
end

function Snapshot.new(wrapper)
	local childSnapshot = Snapshot.child(wrapper)
	childSnapshot.hostKey = nil

	return childSnapshot
end

return Snapshot
]]></string>
              </Properties>
            </Item>
            <Item class="ModuleScript" referent="96">
              <Properties>
                <string name="Name">Snapshot.spec</string>
                <string name="Source">return function()
	local RoactRoot = script.Parent.Parent.Parent.Parent

	local Markers = require(script.Parent.Markers)
	local assertDeepEqual = require(RoactRoot.assertDeepEqual)
	local Binding = require(RoactRoot.Binding)
	local Change = require(RoactRoot.PropMarkers.Change)
	local Component = require(RoactRoot.Component)
	local createElement = require(RoactRoot.createElement)
	local createReconciler = require(RoactRoot.createReconciler)
	local createRef = require(RoactRoot.createRef)
	local ElementKind = require(RoactRoot.ElementKind)
	local Event = require(RoactRoot.PropMarkers.Event)
	local Ref = require(RoactRoot.PropMarkers.Ref)
	local RobloxRenderer = require(RoactRoot.RobloxRenderer)
	local ShallowWrapper = require(script.Parent.Parent.Parent.ShallowWrapper)

	local Snapshot = require(script.Parent.Snapshot)

	local robloxReconciler = createReconciler(RobloxRenderer)

	local function shallow(element, options)
		options = options or {}
		local maxDepth = options.depth or 1
		local hostKey = options.hostKey or "ShallowTree"
		local hostParent = options.hostParent or Instance.new("Folder")

		local virtualNode = robloxReconciler.mountVirtualNode(element, hostParent, hostKey)

		return ShallowWrapper.new(virtualNode, maxDepth)
	end

	describe("type", function()
		describe("host elements", function()
			it("should contain the host kind", function()
				local wrapper = shallow(createElement("Frame"))

				local result = Snapshot.type(wrapper.type)

				expect(result.kind).to.equal(ElementKind.Host)
			end)

			it("should contain the class name", function()
				local className = "Frame"
				local wrapper = shallow(createElement(className))

				local result = Snapshot.type(wrapper.type)

				expect(result.className).to.equal(className)
			end)
		end)

		describe("function elements", function()
			local function SomeComponent()
				return nil
			end

			it("should contain the host kind", function()
				local wrapper = shallow(createElement(SomeComponent))

				local result = Snapshot.type(wrapper.type)

				expect(result.kind).to.equal(ElementKind.Function)
			end)
		end)

		describe("stateful elements", function()
			local componentName = "ComponentName"
			local SomeComponent = Component:extend(componentName)

			function SomeComponent:render()
				return nil
			end

			it("should contain the host kind", function()
				local wrapper = shallow(createElement(SomeComponent))

				local result = Snapshot.type(wrapper.type)

				expect(result.kind).to.equal(ElementKind.Stateful)
			end)

			it("should contain the component name", function()
				local wrapper = shallow(createElement(SomeComponent))

				local result = Snapshot.type(wrapper.type)

				expect(result.componentName).to.equal(componentName)
			end)
		end)
	end)

	describe("signal", function()
		it("should convert signals", function()
			local signalName = "Foo"
			local signalMock = setmetatable({}, {
				__tostring = function()
					return "Signal " .. signalName
				end
			})

			local result = Snapshot.signal(signalMock)

			assertDeepEqual(result, {
				[Markers.Signal] = signalName
			})
		end)
	end)

	describe("propValue", function()
		it("should return the same value for basic types", function()
			local propValues = {7, "hello", Enum.SortOrder.LayoutOrder}

			for i=1, #propValues do
				local prop = propValues[i]
				local result = Snapshot.propValue(prop)

				expect(result).to.equal(prop)
			end
		end)

		it("should return an empty table given an empty table", function()
			local result = Snapshot.propValue({})

			expect(next(result)).never.to.be.ok()
		end)

		it("should serialize a table as a props table", function()
			local key = "some key"
			local value = {
				[key] = "foo",
			}
			local result = Snapshot.propValue(value)

			expect(result[key]).to.equal("foo")
			expect(next(result, key)).never.to.be.ok()
		end)

		it("should return the AnonymousFunction symbol when given a function", function()
			local result = Snapshot.propValue(function() end)

			expect(result).to.equal(Markers.AnonymousFunction)
		end)

		it("should return the Unknown symbol when given an unexpected value", function()
			local result = Snapshot.propValue(nil)

			expect(result).to.equal(Markers.Unknown)
		end)
	end)

	describe("props", function()
		it("should keep props with string keys", function()
			local props = {
				image = "hello",
				text = "never",
			}

			local result = Snapshot.props(props)

			assertDeepEqual(result, props)
		end)

		it("should map Roact.Event to AnonymousFunction", function()
			local props = {
				[Event.Activated] = function() end,
			}

			local result = Snapshot.props(props)

			assertDeepEqual(result, {
				[Event.Activated] = Markers.AnonymousFunction,
			})
		end)

		it("should map Roact.Change to AnonymousFunction", function()
			local props = {
				[Change.Position] = function() end,
			}

			local result = Snapshot.props(props)

			assertDeepEqual(result, {
				[Change.Position] = Markers.AnonymousFunction,
			})
		end)

		it("should map empty refs to the EmptyRef symbol", function()
			local props = {
				[Ref] = createRef(),
			}

			local result = Snapshot.props(props)

			assertDeepEqual(result, {
				[Ref] = Markers.EmptyRef,
			})
		end)

		it("should map refs with value to their symbols", function()
			local instanceClassName = "Folder"
			local ref = createRef()
			Binding.update(ref, Instance.new(instanceClassName))

			local props = {
				[Ref] = ref,
			}

			local result = Snapshot.props(props)

			assertDeepEqual(result, {
				[Ref] = {
					className = instanceClassName,
				},
			})
		end)

		it("should throw when the key is a table", function()
			local function shouldThrow()
				Snapshot.props({
					[{}] = "invalid",
				})
			end

			expect(shouldThrow).to.throw()
		end)
	end)

	describe("child", function()
		it("should have the host key", function()
			local hostKey = "SomeKey"
			local wrapper = shallow(createElement("Frame"))
			wrapper.hostKey = hostKey

			local result = Snapshot.child(wrapper)

			expect(result.hostKey).to.equal(hostKey)
		end)

		it("should contain the element type", function()
			local wrapper = shallow(createElement("Frame"))

			local result = Snapshot.child(wrapper)

			expect(result.type).to.be.ok()
			expect(result.type.kind).to.equal(ElementKind.Host)
			expect(result.type.className).to.equal("Frame")
		end)

		it("should contain the props", function()
			local props = {
				LayoutOrder = 3,
				[Change.Size] = function() end,
			}
			local expectProps = {
				LayoutOrder = 3,
				[Change.Size] = Markers.AnonymousFunction,
			}

			local wrapper = shallow(createElement("Frame", props))

			local result = Snapshot.child(wrapper)

			expect(result.props).to.be.ok()
			assertDeepEqual(result.props, expectProps)
		end)

		it("should contain the element children", function()
			local wrapper = shallow(createElement("Frame", {}, {
				Child = createElement("TextLabel"),
			}))

			local result = Snapshot.child(wrapper)

			expect(result.children).to.be.ok()
			expect(#result.children).to.equal(1)
			local childData = result.children[1]
			expect(childData.type.kind).to.equal(ElementKind.Host)
			expect(childData.type.className).to.equal("TextLabel")
		end)

		it("should sort children by their host key", function()
			local wrapper = shallow(createElement("Frame", {}, {
				Child = createElement("TextLabel"),
				Label = createElement("TextLabel"),
			}))

			local result = Snapshot.child(wrapper)

			expect(result.children).to.be.ok()
			expect(#result.children).to.equal(2)
			expect(result.children[1].hostKey).to.equal("Child")
			expect(result.children[2].hostKey).to.equal("Label")
		end)
	end)

	describe("new", function()
		it("should clear the host key", function()
			local wrapper = shallow(createElement("Frame"))

			local result = Snapshot.new(wrapper)

			expect(result.hostKey).never.to.be.ok()
		end)

		it("should contain the element type", function()
			local wrapper = shallow(createElement("Frame"))

			local result = Snapshot.new(wrapper)

			expect(result.type).to.be.ok()
			expect(result.type.kind).to.equal(ElementKind.Host)
			expect(result.type.className).to.equal("Frame")
		end)

		it("should contain the props", function()
			local props = {
				LayoutOrder = 3,
				[Change.Size] = function() end,
			}
			local expectProps = {
				LayoutOrder = 3,
				[Change.Size] = Markers.AnonymousFunction,
			}

			local wrapper = shallow(createElement("Frame", props))

			local result = Snapshot.new(wrapper)

			expect(result.props).to.be.ok()
			assertDeepEqual(result.props, expectProps)
		end)

		it("should contain the element children", function()
			local wrapper = shallow(createElement("Frame", {}, {
				Child = createElement("TextLabel"),
			}))

			local result = Snapshot.new(wrapper)

			expect(result.children).to.be.ok()
			expect(#result.children).to.equal(1)
			local childData = result.children[1]
			expect(childData.type.kind).to.equal(ElementKind.Host)
			expect(childData.type.className).to.equal("TextLabel")
		end)

		it("should sort children by their host key", function()
			local wrapper = shallow(createElement("Frame", {}, {
				Child = createElement("TextLabel"),
				Label = createElement("TextLabel"),
			}))

			local result = Snapshot.new(wrapper)

			expect(result.children).to.be.ok()
			expect(#result.children).to.equal(2)
			expect(result.children[1].hostKey).to.equal("Child")
			expect(result.children[2].hostKey).to.equal("Label")
		end)
	end)
end</string>
              </Properties>
            </Item>
          </Item>
          <Item class="ModuleScript" referent="97">
            <Properties>
              <string name="Name">SnapshotMatcher</string>
              <string name="Source">local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RoactRoot = script.Parent.Parent.Parent

local Markers = require(script.Parent.Serialize.Markers)
local Serialize = require(script.Parent.Serialize)
local deepEqual = require(RoactRoot.deepEqual)
local ElementKind = require(RoactRoot.ElementKind)

local SnapshotFolderName = "RoactSnapshots"
local SnapshotFolder = ReplicatedStorage:FindFirstChild(SnapshotFolderName)

local SnapshotMatcher = {}
local SnapshotMetatable = {
	__index = SnapshotMatcher,
}

local function throwSnapshotError(matcher, message)
	local newSnapshot = SnapshotMatcher.new(matcher._identifier .. ".NEW", matcher._snapshot)
	newSnapshot:serialize()

	error(message, 3)
end

function SnapshotMatcher.new(identifier, snapshot)
	local snapshotMatcher = {
		_identifier = identifier,
		_snapshot = snapshot,
		_existingSnapshot = SnapshotMatcher._loadExistingData(identifier),
	}

	setmetatable(snapshotMatcher, SnapshotMetatable)

	return snapshotMatcher
end

function SnapshotMatcher:match()
	if self._existingSnapshot == nil then
		throwSnapshotError(self, ("Snapshot %q not found"):format(self._identifier))
	end

	local areEqual, innerMessageTemplate = deepEqual(self._snapshot, self._existingSnapshot)

	if areEqual then
		return
	end

	local innerMessage = innerMessageTemplate
		:gsub("{1}", "new")
		:gsub("{2}", "existing")

	local message = ("Snapshots do not match.\n%s"):format(innerMessage)

	throwSnapshotError(self, message)
end

function SnapshotMatcher:serialize()
	local folder = SnapshotMatcher.getSnapshotFolder()

	local snapshotSource = Serialize.snapshotToString(self._snapshot)
	local existingData = folder:FindFirstChild(self._identifier)

	if not (existingData and existingData:IsA("StringValue")) then
		existingData = Instance.new("StringValue")
		existingData.Name = self._identifier
		existingData.Parent = folder
	end

	existingData.Value = snapshotSource
end

function SnapshotMatcher.getSnapshotFolder()
	SnapshotFolder = ReplicatedStorage:FindFirstChild(SnapshotFolderName)

	if not SnapshotFolder then
		SnapshotFolder = Instance.new("Folder")
		SnapshotFolder.Name = SnapshotFolderName
		SnapshotFolder.Parent = ReplicatedStorage
	end

	return SnapshotFolder
end

function SnapshotMatcher._loadExistingData(identifier)
	local folder = SnapshotMatcher.getSnapshotFolder()

	local existingData = folder:FindFirstChild(identifier)

	if not (existingData and existingData:IsA("ModuleScript")) then
		return nil
	end

	local loadSnapshot = require(existingData)

	return loadSnapshot({
		Roact = require(RoactRoot),
		ElementKind = ElementKind,
		Markers = Markers,
	})
end

return SnapshotMatcher</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="98">
            <Properties>
              <string name="Name">SnapshotMatcher.spec</string>
              <string name="Source">return function()
	local RoactRoot = script.Parent.Parent.Parent

	local SnapshotMatcher = require(script.Parent.SnapshotMatcher)

	local ElementKind = require(RoactRoot.ElementKind)
	local createSpy = require(RoactRoot.createSpy)

	local snapshotFolder = Instance.new("Folder")
	local originalGetSnapshotFolder = SnapshotMatcher.getSnapshotFolder

	local function mockGetSnapshotFolder()
		return snapshotFolder
	end

	local function getSnapshotMock()
		return {
			type = {
				kind = ElementKind.Function,
			},
			hostKey = "HostKey",
			props = {},
			children = {},
		}
	end

	local originalLoadExistingData = SnapshotMatcher._loadExistingData
	local loadExistingDataSpy = nil

	describe("match", function()
		local snapshotMap = {}

		local function beforeTest()
			snapshotMap = {}

			loadExistingDataSpy = createSpy(function(identifier)
				return snapshotMap[identifier]
			end)
			SnapshotMatcher._loadExistingData = loadExistingDataSpy.value
			SnapshotMatcher.getSnapshotFolder = mockGetSnapshotFolder
		end

		local function cleanTest()
			loadExistingDataSpy = nil
			SnapshotMatcher._loadExistingData = originalLoadExistingData
			SnapshotMatcher.getSnapshotFolder = originalGetSnapshotFolder
			snapshotFolder:ClearAllChildren()
		end

		it("should throw if no snapshot is found", function()
			beforeTest()

			local snapshot = getSnapshotMock()

			local matcher = SnapshotMatcher.new("foo", snapshot)

			local function shouldThrow()
				matcher:match()
			end

			expect(shouldThrow).to.throw()

			expect(snapshotFolder:FindFirstChild("foo.NEW")).to.be.ok()

			cleanTest()
		end)

		it("should not serialize if the snapshot already exist", function()
			beforeTest()

			local snapshot = getSnapshotMock()
			local identifier = "foo"
			snapshotMap[identifier] = snapshot

			local serializeSpy = createSpy()

			local matcher = SnapshotMatcher.new(identifier, snapshot)
			matcher.serialize = serializeSpy.value

			matcher:match()

			cleanTest()

			expect(serializeSpy.callCount).to.equal(0)
		end)

		it("should throw an error if the previous snapshot does not match", function()
			beforeTest()

			local snapshot = getSnapshotMock()
			local identifier = "foo"
			snapshotMap[identifier] = {
				Key = "Value"
			}

			local serializeSpy = createSpy()

			local matcher = SnapshotMatcher.new(identifier, snapshot)
			matcher.serialize = serializeSpy.value

			local function shouldThrow()
				matcher:match()
			end

			expect(shouldThrow).to.throw()

			cleanTest()
		end)
	end)

	describe("serialize", function()
		it("should create a StringValue if it does not exist", function()
			SnapshotMatcher.getSnapshotFolder = mockGetSnapshotFolder

			local identifier = "foo"

			local matcher = SnapshotMatcher.new(identifier, getSnapshotMock())

			matcher:serialize()
			local stringValue = snapshotFolder:FindFirstChild(identifier)

			SnapshotMatcher.getSnapshotFolder = originalGetSnapshotFolder

			expect(stringValue).to.be.ok()
			expect(stringValue.Value:len() > 0).to.equal(true)

			stringValue:Destroy()
		end)
	end)

	describe("_loadExistingData", function()
		it("should return nil if data is not found", function()
			SnapshotMatcher.getSnapshotFolder = mockGetSnapshotFolder

			local result = SnapshotMatcher._loadExistingData("foo")

			SnapshotMatcher.getSnapshotFolder = originalGetSnapshotFolder

			expect(result).never.to.be.ok()
		end)
	end)

	describe("getSnapshotFolder", function()
		it("should create a folder in the ReplicatedStorage if it is not found", function()
			local folder = SnapshotMatcher.getSnapshotFolder()

			expect(folder).to.be.ok()
			expect(folder.Parent).to.equal(game:GetService("ReplicatedStorage"))
		end)
	end)
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="99">
            <Properties>
              <string name="Name">init.spec</string>
              <string name="Source">return function()
	local RoactRoot = script.Parent.Parent.Parent

	local Change = require(RoactRoot.PropMarkers.Change)
	local Component = require(RoactRoot.Component)
	local createElement = require(RoactRoot.createElement)
	local createReconciler = require(RoactRoot.createReconciler)
	local Event = require(RoactRoot.PropMarkers.Event)
	local RobloxRenderer = require(RoactRoot.RobloxRenderer)
	local ShallowWrapper = require(script.Parent.Parent.ShallowWrapper)
	local Snapshot = require(script.Parent)

	local robloxReconciler = createReconciler(RobloxRenderer)

	local hostTreeKey = "RoactTree"

	it("should match snapshot of host component with multiple props", function()
		local element = createElement("Frame", {
			AnchorPoint = Vector2.new(0, 0.5),
			BackgroundColor3 = Color3.new(0.1, 0.2, 0.3),
			BackgroundTransparency = 0.205,
			ClipsDescendants = false,
			Size = UDim2.new(0.5, 0, 0.4, 1),
			SizeConstraint = Enum.SizeConstraint.RelativeXY,
			Visible = true,
			ZIndex = 5,
		})

		local rootNode = robloxReconciler.mountVirtualNode(element, nil, hostTreeKey)
		local wrapper = ShallowWrapper.new(rootNode, 1)

		Snapshot.createMatcher("host-frame-with-multiple-props", wrapper):match()
	end)

	it("should match snapshot of function component children", function()
		local function LabelComponent(props)
			return createElement("TextLabel", props)
		end

		local element = createElement("Frame", {}, {
			LabelA = createElement(LabelComponent, {
				Text = "I am label A",
			}),
			LabelB = createElement(LabelComponent, {
				Text = "I am label B",
			}),
		})

		local rootNode = robloxReconciler.mountVirtualNode(element, nil, hostTreeKey)
		local wrapper = ShallowWrapper.new(rootNode, 1)

		Snapshot.createMatcher("function-component-children", wrapper):match()
	end)

	it("should match snapshot of stateful component", function()
		local StatefulComponent = Component:extend("CoolComponent")

		function StatefulComponent:render()
			return createElement("TextLabel")
		end

		local element = createElement("Frame", {}, {
			Child = createElement(StatefulComponent, {
				label = {
					Text = "foo",
				},
			}),
		})

		local rootNode = robloxReconciler.mountVirtualNode(element, nil, hostTreeKey)
		local wrapper = ShallowWrapper.new(rootNode, 1)

		Snapshot.createMatcher("stateful-component-children", wrapper):match()
	end)

	it("should match snapshot with event props", function()
		local function emptyFunction()
		end

		local element = createElement("TextButton", {
			[Change.AbsoluteSize] = emptyFunction,
			[Change.Visible] = emptyFunction,
			[Event.Activated] = emptyFunction,
			[Event.MouseButton1Click] = emptyFunction,
		})

		local rootNode = robloxReconciler.mountVirtualNode(element, nil, hostTreeKey)
		local wrapper = ShallowWrapper.new(rootNode, 1)

		Snapshot.createMatcher("component-with-event-props", wrapper):match()
	end)

	it("should throw if the identifier contains invalid characters", function()
		local invalidCharacters = {"\\", "/", "?"}

		for i=1, #invalidCharacters do
			local function shouldThrow()
				Snapshot.createMatcher("id" .. invalidCharacters[i], {})
			end

			expect(shouldThrow).to.throw()
		end
	end)
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="ModuleScript" referent="100">
          <Properties>
            <string name="Name">VirtualNodeConstraints</string>
            <string name="Source">local Constraints = require(script.Constraints)

local function satisfiesAll(virtualNode, constraints)
	for constraint, value in pairs(constraints) do
		local constraintFunction = Constraints[constraint]

		if not constraintFunction(virtualNode, value) then
			return false
		end
	end

	return true
end

local function validate(constraints)
	for constraint in pairs(constraints) do
		assert(Constraints[constraint] ~= nil, ("unknown constraint %q"):format(constraint))
	end
end

return {
	satisfiesAll = satisfiesAll,
	validate = validate,
}</string>
          </Properties>
          <Item class="ModuleScript" referent="101">
            <Properties>
              <string name="Name">Constraints</string>
              <string name="Source">local RoactRoot = script.Parent.Parent.Parent

local ElementKind = require(RoactRoot.ElementKind)

local Constraints = setmetatable({}, {
	__index = function(self, unexpectedConstraint)
		error(("unknown constraint %q"):format(unexpectedConstraint))
	end,
})

function Constraints.className(virtualNode, className)
	local element = virtualNode.currentElement
	local isHost = ElementKind.of(element) == ElementKind.Host

	return isHost and element.component == className
end

function Constraints.component(virtualNode, expectComponentValue)
	return virtualNode.currentElement.component == expectComponentValue
end

function Constraints.props(virtualNode, propSubSet)
	local elementProps = virtualNode.currentElement.props

	for propKey, propValue in pairs(propSubSet) do
		if elementProps[propKey] ~= propValue then
			return false
		end
	end

	return true
end

function Constraints.hostKey(virtualNode, expectHostKey)
	return virtualNode.hostKey == expectHostKey
end

return Constraints</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="102">
            <Properties>
              <string name="Name">Constraints.spec</string>
              <string name="Source">return function()
	local RoactRoot = script.Parent.Parent.Parent

	local createElement = require(RoactRoot.createElement)
	local createReconciler = require(RoactRoot.createReconciler)
	local RoactComponent = require(RoactRoot.Component)
	local RobloxRenderer = require(RoactRoot.RobloxRenderer)

	local Constraints = require(script.Parent.Constraints)

	local robloxReconciler = createReconciler(RobloxRenderer)

	local HOST_PARENT = nil
	local HOST_KEY = "ConstraintsTree"

	local function getVirtualNode(element)
		return robloxReconciler.mountVirtualNode(element, HOST_PARENT, HOST_KEY)
	end

	describe("className", function()
		it("should return true when a host virtualNode has the given class name", function()
			local className = "TextLabel"
			local element = createElement(className)

			local virtualNode = getVirtualNode(element)

			local result = Constraints.className(virtualNode, className)

			expect(result).to.equal(true)
		end)

		it("should return false when a host virtualNode does not have the same class name", function()
			local element = createElement("Frame")

			local virtualNode = getVirtualNode(element)

			local result = Constraints.className(virtualNode, "TextLabel")

			expect(result).to.equal(false)
		end)

		it("should return false when not a host virtualNode", function()
			local function Component()
				return createElement("TextLabel")
			end
			local element = createElement(Component)

			local virtualNode = getVirtualNode(element)

			local result = Constraints.className(virtualNode, "TextLabel")

			expect(result).to.equal(false)
		end)
	end)

	describe("component", function()
		it("should return true given a host virtualNode with the same class name", function()
			local className = "TextLabel"
			local element = createElement(className)

			local virtualNode = getVirtualNode(element)

			local result = Constraints.component(virtualNode, className)

			expect(result).to.equal(true)
		end)

		it("should return true given a functional virtualNode function", function()
			local function Component(props)
				return nil
			end

			local element = createElement(Component)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.component(virtualNode, Component)

			expect(result).to.equal(true)
		end)

		it("should return true given a stateful virtualNode component class", function()
			local Component = RoactComponent:extend("Foo")

			function Component:render()
				return nil
			end

			local element = createElement(Component)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.component(virtualNode, Component)

			expect(result).to.equal(true)
		end)

		it("should return false when components kind do not match", function()
			local function Component(props)
				return nil
			end

			local element = createElement(Component)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.component(virtualNode, "TextLabel")

			expect(result).to.equal(false)
		end)
	end)

	describe("props", function()
		it("should return true when the virtualNode satisfies all prop constraints", function()
			local props = {
				Visible = false,
				LayoutOrder = 7,
			}
			local element = createElement("TextLabel", props)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.props(virtualNode, {
				Visible = false,
				LayoutOrder = 7,
			})

			expect(result).to.equal(true)
		end)

		it("should return true if the props are from a subset of the virtualNode props", function()
			local props = {
				Visible = false,
				LayoutOrder = 7,
			}

			local element = createElement("TextLabel", props)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.props(virtualNode, {
				LayoutOrder = 7,
			})

			expect(result).to.equal(true)
		end)

		it("should return false if a subset of the props are different from the given props", function()
			local props = {
				Visible = false,
				LayoutOrder = 1,
			}

			local element = createElement("TextLabel", props)
			local virtualNode = getVirtualNode(element)

			local result = Constraints.props(virtualNode, {
				LayoutOrder = 7,
			})

			expect(result).to.equal(false)
		end)
	end)

	describe("hostKey", function()
		it("should return true when the virtualNode has the same hostKey", function()
			local element = createElement("TextLabel")
			local virtualNode = getVirtualNode(element)

			local result = Constraints.hostKey(virtualNode, HOST_KEY)

			expect(result).to.equal(true)
		end)

		it("should return false when the virtualNode hostKey is different", function()
			local element = createElement("TextLabel")
			local virtualNode = getVirtualNode(element)

			local result = Constraints.hostKey(virtualNode, "foo")

			expect(result).to.equal(false)
		end)
	end)
end</string>
            </Properties>
          </Item>
          <Item class="ModuleScript" referent="103">
            <Properties>
              <string name="Name">init.spec</string>
              <string name="Source">return function()
	local VirtualNodesConstraints = require(script.Parent)

	describe("validate", function()
		it("should throw when a constraint does not exist", function()
			local constraints = {
				hostKey = "Key",
				foo = "bar",
			}

			local function validateNotExistingConstraint()
				VirtualNodesConstraints.validate(constraints)
			end

			expect(validateNotExistingConstraint).to.throw()
		end)

		it("should not throw when all constraints exsits", function()
			local constraints = {
				hostKey = "Key",
				className = "Frame",
			}

			local function validateExistingConstraints()
				VirtualNodesConstraints.validate(constraints)
			end

			expect(validateExistingConstraints).never.to.throw()
		end)
	end)
end</string>
            </Properties>
          </Item>
        </Item>
        <Item class="ModuleScript" referent="104">
          <Properties>
            <string name="Name">init.spec</string>
            <string name="Source">return function()
	local RoactRoot = script.Parent.Parent

	local createElement = require(RoactRoot.createElement)
	local createReconciler = require(RoactRoot.createReconciler)
	local RobloxRenderer = require(RoactRoot.RobloxRenderer)
	local shallow = require(script.Parent)

	local robloxReconciler = createReconciler(RobloxRenderer)

	local shallowTreeKey = "RoactTree"

	it("should return a shallow wrapper with depth = 1 by default", function()
		local element = createElement("Frame", {}, {
			Child = createElement("Frame", {}, {
				SubChild = createElement("Frame"),
			}),
		})

		local rootNode = robloxReconciler.mountVirtualNode(element, nil, shallowTreeKey)
		local wrapper = shallow(rootNode)
		local childWrapper = wrapper:findUnique()

		expect(#childWrapper.children).to.equal(0)
	end)
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="105">
          <Properties>
            <string name="Name">validateShallowOptions</string>
            <string name="Source">local optionsTypes = {
	depth = "number",
}

local function validateShallowOptions(options)
	if options == nil then
		return true
	end

	for key, value in pairs(options) do
		local expectType = optionsTypes[key]

		if expectType == nil then
			return false, ("unexpected option field %q (with value of %s)"):format(
				tostring(key),
				tostring(value)
			)
		elseif typeof(value) ~= expectType then
			return false, ("unexpected option type for %q (expected %s but got %s)"):format(
				tostring(key),
				expectType,
				typeof(value)
			)
		end
	end

	return true
end

return validateShallowOptions</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="106">
          <Properties>
            <string name="Name">validateShallowOptions.spec</string>
            <string name="Source">return function()
	local validateShallowOptions = require(script.Parent.validateShallowOptions)

	it("should return true given nil", function()
		expect(validateShallowOptions(nil)).to.equal(true)
	end)

	it("should return true given an empty table", function()
		expect(validateShallowOptions({})).to.equal(true)
	end)

	it("should return true if the key's value match the expected type", function()
		local success = validateShallowOptions({
			depth = 1,
		})

		expect(success).to.equal(true)
	end)

	it("should return false if a key is not expected", function()
		local success, message = validateShallowOptions({
			foo = 1,
		})

		expect(success).to.equal(false)
		expect(message).to.be.a("string")
	end)

	it("should return false if an expected value has not the correct type", function()
		local success, message = validateShallowOptions({
			depth = "foo",
		})

		expect(success).to.equal(false)
		expect(message).to.be.a("string")
	end)
end</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="107">
        <Properties>
          <string name="Name">strict</string>
          <string name="Source">local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,

		__newindex = function(self, key, value)
			local message = ("%q (%s) is not a valid member of %s"):format(
				tostring(key),
				typeof(key),
				name
			)

			error(message, 2)
		end,
	})
end

return strict</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="108">
        <Properties>
          <string name="Name">strict.spec</string>
          <string name="Source">return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end</string>
        </Properties>
      </Item>
    </Item>
    <Item class="Folder" referent="109">
      <Properties>
        <string name="Name">RoactSnapshots</string>
      </Properties>
      <Item class="ModuleScript" referent="110">
        <Properties>
          <string name="Name">component-with-event-props</string>
          <string name="Source">return function(dependencies)
  local Roact = dependencies.Roact
  local ElementKind = dependencies.ElementKind
  local Markers = dependencies.Markers

  return {
    type = {
      kind = ElementKind.Host,
      className = "TextButton",
    },
    props = {
      [Roact.Event.Activated] = Markers.AnonymousFunction,
      [Roact.Event.MouseButton1Click] = Markers.AnonymousFunction,
      [Roact.Change.AbsoluteSize] = Markers.AnonymousFunction,
      [Roact.Change.Visible] = Markers.AnonymousFunction,
    },
    children = {},
  }
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="111">
        <Properties>
          <string name="Name">function-component-children</string>
          <string name="Source">return function(dependencies)
  local Roact = dependencies.Roact
  local ElementKind = dependencies.ElementKind
  local Markers = dependencies.Markers
  
  return {
    type = {
      kind = ElementKind.Host,
      className = "Frame",
    },
    props = {},
    children = {
      {
        type = {
          kind = ElementKind.Function,
        },
        hostKey = "LabelA",
        props = {
          Text = "I am label A",
        },
        children = {},
      },
      {
        type = {
          kind = ElementKind.Function,
        },
        hostKey = "LabelB",
        props = {
          Text = "I am label B",
        },
        children = {},
      },
    },
  }
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="112">
        <Properties>
          <string name="Name">host-frame-with-multiple-props</string>
          <string name="Source">return function(dependencies)
  local Roact = dependencies.Roact
  local ElementKind = dependencies.ElementKind
  local Markers = dependencies.Markers
  
  return {
    type = {
      kind = ElementKind.Host,
      className = "Frame",
    },
    props = {
      AnchorPoint = Vector2.new(0, 0.5),
      BackgroundColor3 = Color3.new(0.1, 0.2, 0.3),
      BackgroundTransparency = 0.205,
      ClipsDescendants = false,
      Size = UDim2.new(0.5, 0, 0.4, 1),
      SizeConstraint = Enum.SizeConstraint.RelativeXY,
      Visible = true,
      ZIndex = 5,
    },
    children = {},
  }
end</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="113">
        <Properties>
          <string name="Name">stateful-component-children</string>
          <string name="Source">return function(dependencies)
  local Roact = dependencies.Roact
  local ElementKind = dependencies.ElementKind
  local Markers = dependencies.Markers
  
  return {
    type = {
      kind = ElementKind.Host,
      className = "Frame",
    },
    props = {},
    children = {
      {
        type = {
          kind = ElementKind.Stateful,
          componentName = "CoolComponent",
        },
        hostKey = "Child",
        props = {
          label = {
            Text = "foo",
          },
        },
        children = {},
      },
    },
  }
end</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ModuleScript" referent="114">
      <Properties>
        <string name="Name">TestEZ</string>
        <string name="Source">local Expectation = require(script.Expectation)
local TestBootstrap = require(script.TestBootstrap)
local TestEnum = require(script.TestEnum)
local TestPlan = require(script.TestPlan)
local TestPlanBuilder = require(script.TestPlanBuilder)
local TestPlanner = require(script.TestPlanner)
local TestResults = require(script.TestResults)
local TestRunner = require(script.TestRunner)
local TestSession = require(script.TestSession)
local TextReporter = require(script.Reporters.TextReporter)

local function run(testRoot, callback)
	local modules = TestBootstrap:getModules(testRoot)
	local plan = TestPlanner.createPlan(modules)
	local results = TestRunner.runPlan(plan)

	callback(results)
end

local TestEZ = {
	run = run,

	Expectation = Expectation,
	TestBootstrap = TestBootstrap,
	TestEnum = TestEnum,
	TestPlan = TestPlan,
	TestPlanBuilder = TestPlanBuilder,
	TestPlanner = TestPlanner,
	TestResults = TestResults,
	TestRunner = TestRunner,
	TestSession = TestSession,

	Reporters = {
		TextReporter = TextReporter,
	},
}

return TestEZ</string>
      </Properties>
      <Item class="ModuleScript" referent="115">
        <Properties>
          <string name="Name">Expectation</string>
          <string name="Source">--[[
	Allows creation of expectation statements designed for behavior-driven
	testing (BDD). See Chai (JS) or RSpec (Ruby) for examples of other BDD
	frameworks.

	The Expectation class is exposed to tests as a function called `expect`:

		expect(5).to.equal(5)
		expect(foo()).to.be.ok()

	Expectations can be negated using .never:

		expect(true).never.to.equal(false)

	Expectations throw errors when their conditions are not met.
]]

local Expectation = {}

--[[
	These keys don't do anything except make expectations read more cleanly
]]
local SELF_KEYS = {
	to = true,
	be = true,
	been = true,
	have = true,
	was = true,
	at = true,
}

--[[
	These keys invert the condition expressed by the Expectation.
]]
local NEGATION_KEYS = {
	never = true,
}

--[[
	Extension of Lua's 'assert' that lets you specify an error level.
]]
local function assertLevel(condition, message, level)
	message = message or "Assertion failed!"
	level = level or 1

	if not condition then
		error(message, level + 1)
	end
end

--[[
	Returns a version of the given method that can be called with either . or :
]]
local function bindSelf(self, method)
	return function(firstArg, ...)
		if (firstArg == self) then
			return method(self, ...)
		else
			return method(self, firstArg, ...)
		end
	end
end

local function formatMessage(result, trueMessage, falseMessage)
	if result then
		return trueMessage
	else
		return falseMessage
	end
end

--[[
	Create a new expectation
]]
function Expectation.new(value)
	local self = {
		value = value,
		successCondition = true,
		condition = false
	}

	setmetatable(self, Expectation)

	self.a = bindSelf(self, self.a)
	self.an = self.a
	self.ok = bindSelf(self, self.ok)
	self.equal = bindSelf(self, self.equal)
	self.throw = bindSelf(self, self.throw)
	self.called = bindSelf(self, self.called)

	return self
end

function Expectation.__index(self, key)
	-- Keys that don't do anything except improve readability
	if SELF_KEYS[key] then
		return self
	end

	-- Invert your assertion
	if NEGATION_KEYS[key] then
		local newExpectation = Expectation.new(self.value)
		newExpectation.successCondition = not self.successCondition

		return newExpectation
	end

	-- Fall back to methods provided by Expectation
	return Expectation[key]
end

--[[
	Called by expectation terminators to reset modifiers in a statement.

	This makes chains like:

		expect(5)
			.never.to.equal(6)
			.to.equal(5)

	Work as expected.
]]
function Expectation:_resetModifiers()
	self.successCondition = true
end

--[[
	Assert that the expectation value is the given type.

	expect(5).to.be.a("number")
]]
function Expectation:a(typeName)
	local result = (type(self.value) == typeName) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value of type %q, got value %q of type %s"):format(
			typeName,
			tostring(self.value),
			type(self.value)
		),
		("Expected value not of type %q, got value %q of type %s"):format(
			typeName,
			tostring(self.value),
			type(self.value)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our expectation value is truthy
]]
function Expectation:ok()
	local result = (self.value ~= nil) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value %q to be non-nil"):format(
			tostring(self.value)
		),
		("Expected value %q to be nil"):format(
			tostring(self.value)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our expectation value is equal to another value
]]
function Expectation:equal(otherValue)
	local result = (self.value == otherValue) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value %q (%s), got %q (%s) instead"):format(
			tostring(otherValue),
			type(otherValue),
			tostring(self.value),
			type(self.value)
		),
		("Expected anything but value %q (%s)"):format(
			tostring(otherValue),
			type(otherValue)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our functoid expectation value throws an error when called
]]
function Expectation:throw()
	local ok, err = pcall(self.value)
	local result = ok ~= self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected function to succeed, but it threw an error: %s"):format(
			tostring(err)
		),
		"Expected function to throw an error, but it did not."
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

return Expectation</string>
        </Properties>
      </Item>
      <Item class="Folder" referent="116">
        <Properties>
          <string name="Name">Reporters</string>
        </Properties>
        <Item class="ModuleScript" referent="117">
          <Properties>
            <string name="Name">TextReporter</string>
            <string name="Source">--[[
	The TextReporter uses the results from a completed test to output text to
	standard output and TestService.
]]

local TestService = game:GetService("TestService")

local TestEnum = require(script.Parent.Parent.TestEnum)

local INDENT = (" "):rep(3)
local STATUS_SYMBOLS = {
	[TestEnum.TestStatus.Success] = "+",
	[TestEnum.TestStatus.Failure] = "-",
	[TestEnum.TestStatus.Skipped] = "~"
}
local UNKNOWN_STATUS_SYMBOL = "?"

local TextReporter = {}

local function reportNode(node, buffer, level)
	buffer = buffer or {}
	level = level or 0

	if node.status == TestEnum.TestStatus.Skipped then
		return buffer
	end

	local line

	if node.status then
		local symbol = STATUS_SYMBOLS[node.status] or UNKNOWN_STATUS_SYMBOL

		line = ("%s[%s] %s"):format(
			INDENT:rep(level),
			symbol,
			node.planNode.phrase
		)
	else
		line = ("%s%s"):format(
			INDENT:rep(level),
			node.planNode.phrase
		)
	end

	table.insert(buffer, line)

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, level + 1)
	end

	return buffer
end

local function reportRoot(node)
	local buffer = {}

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, 0)
	end

	return buffer
end

local function report(root)
	local buffer = reportRoot(root)

	return table.concat(buffer, "\n")
end

function TextReporter.report(results)
	local resultBuffer = {
		"Test results:",
		report(results),
		("%d passed, %d failed, %d skipped"):format(
			results.successCount,
			results.failureCount,
			results.skippedCount
		)
	}

	print(table.concat(resultBuffer, "\n"))

	if results.failureCount > 0 then
		print(("%d test nodes reported failures."):format(results.failureCount))
	end

	if #results.errors > 0 then
		print("Errors reported by tests:")
		print("")

		for _, message in ipairs(results.errors) do
			TestService:Error(message)

			-- Insert a blank line after each error
			print("")
		end
	end
end

return TextReporter</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="118">
        <Properties>
          <string name="Name">TestBootstrap</string>
          <string name="Source">--[[
	Provides an interface to quickly run and report tests from a given object.
]]

local TestPlanner = require(script.Parent.TestPlanner)
local TestRunner = require(script.Parent.TestRunner)
local TextReporter = require(script.Parent.Reporters.TextReporter)

local TestBootstrap = {}

local function stripSpecSuffix(name)
	return (name:gsub("%.spec$", ""))
end

local function getPath(module, root)
	root = root or game

	local path = {}
	local last = module

	while last ~= nil and last ~= root do
		table.insert(path, stripSpecSuffix(last.Name))
		last = last.Parent
	end

	return path
end

--[[
	Find all the ModuleScripts in this tree that are tests.
]]
function TestBootstrap:getModules(root, modules, current)
	modules = modules or {}
	current = current or root

	for _, child in ipairs(current:GetChildren()) do
		if child:IsA("ModuleScript") and child.Name:match("%.spec$") then
			local method = require(child)
			local path = getPath(child, root)

			table.insert(modules, {
				method = method,
				path = path
			})
		else
			self:getModules(root, modules, child)
		end
	end

	table.sort(modules, function(a, b)
		return a.path[#a.path]:lower() &lt; b.path[#b.path]:lower()
	end)

	return modules
end

--[[
	Runs all test and reports the results using the given test reporter.

	If no reporter is specified, a reasonable default is provided.

	This function demonstrates the expected workflow with this testing system:
	1. Locate test modules
	2. Generate test plan
	3. Run test plan
	4. Report test results

	This means we could hypothetically present a GUI to the developer that shows
	the test plan before we execute it, allowing them to toggle specific tests
	before they're run, but after they've been identified!
]]
function TestBootstrap:run(root, reporter, showTimingInfo)
	if not root then
		error("You must provide a root object to search for tests in!", 2)
	end

	reporter = reporter or TextReporter

	local startTime = tick()

	local modules = self:getModules(root)
	local afterModules = tick()

	local plan = TestPlanner.createPlan(modules)
	local afterPlan = tick()

	local results = TestRunner.runPlan(plan)
	local afterRun = tick()

	reporter.report(results)
	local afterReport = tick()

	if showTimingInfo then
		local timing = {
			("Took %f seconds to locate test modules"):format(afterModules - startTime),
			("Took %f seconds to create test plan"):format(afterPlan - afterModules),
			("Took %f seconds to run tests"):format(afterRun - afterPlan),
			("Took %f seconds to report tests"):format(afterReport - afterRun),
		}

		print(table.concat(timing, "\n"))
	end

	return results
end

return TestBootstrap</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="119">
        <Properties>
          <string name="Name">TestEnum</string>
          <string name="Source">--[[
	Constants used throughout the testing framework.
]]

local TestEnum = {}

TestEnum.TestStatus = {
	Success = "Success",
	Failure = "Failure",
	Skipped = "Skipped"
}

TestEnum.NodeType = {
	Describe = "Describe",
	It = "It"
}

TestEnum.NodeModifier = {
	None = "None",
	Skip = "Skip",
	Focus = "Focus"
}

return TestEnum</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="120">
        <Properties>
          <string name="Name">TestPlan</string>
          <string name="Source">--[[
	Represents a tree of tests that have been loaded but not necessarily
	executed yet.

	TestPlan objects are produced by TestPlanner and TestPlanBuilder.
]]

local TestEnum = require(script.Parent.TestEnum)

local TestPlan = {}

TestPlan.__index = TestPlan

--[[
	Create a new, empty TestPlan.
]]
function TestPlan.new()
	local self = {
		children = {}
	}

	setmetatable(self, TestPlan)

	return self
end

--[[
	Calls the given callback on all nodes in the tree, traversed depth-first.
]]
function TestPlan:visitAllNodes(callback, root)
	root = root or self

	for _, child in ipairs(root.children) do
		callback(child)

		self:visitAllNodes(callback, child)
	end
end

--[[
	Creates a new node that would be suitable to insert into the TestPlan.
]]
function TestPlan.createNode(phrase, nodeType, nodeModifier)
	nodeModifier = nodeModifier or TestEnum.NodeModifier.None

	local node = {
		phrase = phrase,
		type = nodeType,
		modifier = nodeModifier,
		children = {},
		callback = nil
	}

	return node
end

--[[
	Visualizes the test plan in a simple format, suitable for debugging the test
	plan's structure.
]]
function TestPlan:visualize(root, level)
	root = root or self
	level = level or 0

	local buffer = {}

	for _, child in ipairs(root.children) do
		if child.type == TestEnum.NodeType.It then
			table.insert(buffer, (" "):rep(3 * level) .. child.phrase)
		else
			table.insert(buffer, (" "):rep(3 * level) .. child.phrase)
		end

		if #child.children > 0 then
			local text = self:visualize(child, level + 1)
			table.insert(buffer, text)
		end
	end

	return table.concat(buffer, "\n")
end

--[[
	Gets a list of all nodes in the tree for which the given callback returns
	true.
]]
function TestPlan:findNodes(callback, results, node)
	node = node or self
	results = results or {}

	for _, childNode in ipairs(node.children) do
		if callback(childNode) then
			table.insert(results, childNode)
		end

		self:findNodes(callback, results, childNode)
	end

	return results
end

return TestPlan</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="121">
        <Properties>
          <string name="Name">TestPlanBuilder</string>
          <string name="Source">--[[
	Represents the ephermal state used for building a TestPlan from some other
	representation.

	TestPlanBuilder keeps track of a stack of nodes that represents the current
	position in the hierarchy, allowing the consumer to move up and down the
	tree as new nodes are discovered.
]]

local TestPlan = require(script.Parent.TestPlan)

local TestPlanBuilder = {}

TestPlanBuilder.__index = TestPlanBuilder

--[[
	Create a new TestPlanBuilder, used for creating a TestPlan.
]]
function TestPlanBuilder.new()
	local self = {
		plan = TestPlan.new(),
		nodeStack = {}
	}

	setmetatable(self, TestPlanBuilder)

	return self
end

--[[
	Verify that the TestPlanBuilder's state is valid and get a TestPlan from it.
]]
function TestPlanBuilder:finalize()
	if #self.nodeStack ~= 0 then
		error("Cannot finalize a TestPlan with nodes still on the stack!", 2)
	end

	return self.plan
end

--[[
	Grab the current node being worked on by the TestPlanBuilder.
]]
function TestPlanBuilder:getCurrentNode()
	return self.nodeStack[#self.nodeStack] or self.plan
end

--[[
	Creates and pushes a node onto the navigation stack.
]]
function TestPlanBuilder:pushNode(phrase, nodeType, nodeModifier)
	local lastNode = self.nodeStack[#self.nodeStack] or self.plan

	-- Find an existing node with this phrase to use
	local useNode
	for _, child in ipairs(lastNode.children) do
		if child.phrase == phrase then
			useNode = child
			break
		end
	end

	-- Didn't find one, create a new node
	if not useNode then
		useNode = TestPlan.createNode(phrase, nodeType, nodeModifier)
		useNode.parent = lastNode

		table.insert(lastNode.children, useNode)
	end

	table.insert(self.nodeStack, useNode)

	return useNode
end

--[[
	Pops a node off of the node navigation stack.
]]
function TestPlanBuilder:popNode()
	assert(#self.nodeStack > 0, "Tried to pop from an empty node stack!")
	return table.remove(self.nodeStack, #self.nodeStack)
end

return TestPlanBuilder</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="122">
        <Properties>
          <string name="Name">TestPlanner</string>
          <string name="Source">--[[
	Turns a series of specification functions into a test plan.

	Uses a TestPlanBuilder to keep track of the state of the tree being built.
]]

local TestEnum = require(script.Parent.TestEnum)
local TestPlanBuilder = require(script.Parent.TestPlanBuilder)

local TestPlanner = {}

--[[
	Create a new environment with functions for defining the test plan structure
	using the given TestPlanBuilder.

	These functions illustrate the advantage of the stack-style tree navigation
	as state doesn't need to be passed around between functions or explicitly
	global.
]]
function TestPlanner.createEnvironment(builder)
	local env = {}

	function env.describe(phrase, callback)
		local node = builder:pushNode(phrase, TestEnum.NodeType.Describe)

		local ok, err = pcall(callback)

		-- loadError on a TestPlan node is an automatic failure
		if not ok then
			node.loadError = err
		end

		builder:popNode()
	end

	function env.it(phrase, callback)
		local node = builder:pushNode(phrase, TestEnum.NodeType.It)

		node.callback = callback

		builder:popNode()
	end

	function env.itFOCUS(phrase, callback)
		local node = builder:pushNode(phrase, TestEnum.NodeType.It, TestEnum.NodeModifier.Focus)

		node.callback = callback

		builder:popNode()
	end

	function env.itSKIP(phrase, callback)
		local node = builder:pushNode(phrase, TestEnum.NodeType.It, TestEnum.NodeModifier.Skip)

		node.callback = callback

		builder:popNode()
	end

	function env.FOCUS()
		local currentNode = builder:getCurrentNode()

		currentNode.modifier = TestEnum.NodeModifier.Focus
	end

	function env.SKIP()
		local currentNode = builder:getCurrentNode()

		currentNode.modifier = TestEnum.NodeModifier.Skip
	end

	--[[
		These method is intended to disable the use of xpcall when running
		nodes contained in the same node that this function is called in.
		This is because xpcall breaks badly if the method passed yields.

		This function is intended to be hideous and seldom called.

		Once xpcall is able to yield, this function is obsolete.
	]]
	function env.HACK_NO_XPCALL()
		local currentNode = builder:getCurrentNode()

		currentNode.HACK_NO_XPCALL = true
	end

	return env
end

--[[
	Create a new TestPlan from a list of specification functions.

	These functions should call a combination of `describe` and `it` (and their
	variants), which will be turned into a test plan to be executed.
]]
function TestPlanner.createPlan(specFunctions)
	local builder = TestPlanBuilder.new()
	local env = TestPlanner.createEnvironment(builder)

	for _, module in ipairs(specFunctions) do
		local currentEnv = getfenv(module.method)

		for key, value in pairs(env) do
			currentEnv[key] = value
		end

		local nodeCount = #module.path

		-- Dive into auto-named nodes for this module
		for i = nodeCount, 1, -1 do
			local name = module.path[i]
			builder:pushNode(name, TestEnum.NodeType.Describe)
		end

		local ok, err = xpcall(module.method, function(err)
			return err .. "\n" .. debug.traceback()
		end)

		-- This is an error outside of any describe/it blocks.
		-- We attach it to the node we generate automatically per-file.
		if not ok then
			local node = builder:getCurrentNode()
			node.loadError = err
		end

		-- Back out of auto-named nodes
		for _ = 1, nodeCount do
			builder:popNode()
		end
	end

	return builder:finalize()
end

return TestPlanner</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="123">
        <Properties>
          <string name="Name">TestResults</string>
          <string name="Source">--[[
	Represents a tree of test results.

	Each node in the tree corresponds directly to a node in a corresponding
	TestPlan, accessible via the 'planNode' field.

	TestResults objects are produced by TestRunner using TestSession as state.
]]

local TestEnum = require(script.Parent.TestEnum)

local STATUS_SYMBOLS = {
	[TestEnum.TestStatus.Success] = "+",
	[TestEnum.TestStatus.Failure] = "-",
	[TestEnum.TestStatus.Skipped] = "~"
}

local TestResults = {}

TestResults.__index = TestResults

--[[
	Create a new TestResults tree that's linked to the given TestPlan.
]]
function TestResults.new(plan)
	local self = {
		successCount = 0,
		failureCount = 0,
		skippedCount = 0,
		planNode = plan,
		children = {},
		errors = {}
	}

	setmetatable(self, TestResults)

	return self
end

--[[
	Create a new result node that can be inserted into a TestResult tree.
]]
function TestResults.createNode(planNode)
	local node = {
		planNode = planNode,
		children = {},
		errors = {},
		status = nil
	}

	return node
end

--[[
	Visit all test result nodes, depth-first.
]]
function TestResults:visitAllNodes(callback, root)
	root = root or self

	for _, child in ipairs(root.children) do
		callback(child)

		self:visitAllNodes(callback, child)
	end
end

--[[
	Creates a debug visualization of the test results.
]]
function TestResults:visualize(root, level)
	root = root or self
	level = level or 0

	local buffer = {}

	for _, child in ipairs(root.children) do
		if child.planNode.type == TestEnum.NodeType.It then
			local symbol = STATUS_SYMBOLS[child.status] or "?"
			local str = ("%s[%s] %s"):format(
				(" "):rep(3 * level),
				symbol,
				child.planNode.phrase
			)

			if #child.messages > 0 then
				str = str .. "\n " .. (" "):rep(3 * level) .. table.concat(child.messages, "\n " .. (" "):rep(3 * level))
			end

			table.insert(buffer, str)
		else
			local str = ("%s%s"):format(
				(" "):rep(3 * level),
				child.planNode.phrase
			)

			if child.status then
				str = str .. (" (%s)"):format(child.status)
			end

			table.insert(buffer, str)

			if #child.children > 0 then
				local text = self:visualize(child, level + 1)
				table.insert(buffer, text)
			end
		end
	end

	return table.concat(buffer, "\n")
end

return TestResults</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="124">
        <Properties>
          <string name="Name">TestRunner</string>
          <string name="Source">--[[
	Contains the logic to run a test plan and gather test results from it.

	TestRunner accepts a TestPlan object, executes the planned tests, and
	produces a TestResults object. While the tests are running, the system's
	state is contained inside a TestSession object.
]]

local Expectation = require(script.Parent.Expectation)
local TestEnum = require(script.Parent.TestEnum)
local TestSession = require(script.Parent.TestSession)

local RUNNING_GLOBAL = "__TESTEZ_RUNNING_TEST__"

local TestRunner = {
	environment = {}
}

function TestRunner.environment.expect(...)
	return Expectation.new(...)
end

--[[
	Runs the given TestPlan and returns a TestResults object representing the
	results of the run.
]]
function TestRunner.runPlan(plan)
	local session = TestSession.new(plan)

	local exclusiveNodes = plan:findNodes(function(node)
		return node.modifier == TestEnum.NodeModifier.Focus
	end)

	session.hasFocusNodes = #exclusiveNodes > 0

	TestRunner.runPlanNode(session, plan)

	return session:finalize()
end

--[[
	Run the given test plan node and its descendants, using the given test
	session to store all of the results.
]]
function TestRunner.runPlanNode(session, planNode, noXpcall)
	for _, childPlanNode in ipairs(planNode.children) do
		local childResultNode = session:pushNode(childPlanNode)

		if childPlanNode.type == TestEnum.NodeType.It then
			if session:shouldSkip() then
				childResultNode.status = TestEnum.TestStatus.Skipped
			else
				-- Errors can be set either via `error` propagating upwards or
				-- by a test calling fail([message]).
				local success = true
				local errorMessage

				local testEnvironment = getfenv(childPlanNode.callback)

				for key, value in pairs(TestRunner.environment) do
					testEnvironment[key] = value
				end

				testEnvironment.fail = function(message)
					if message == nil then
						message = "fail() was called."
					end

					success = false
					errorMessage = message .. "\n" .. debug.traceback()
				end

				-- We prefer xpcall, but yielding doesn't work from xpcall.
				-- As a workaround, you can mark nodes as "not xpcallable"
				local call = noXpcall and pcall or xpcall

				-- Any code can check RUNNING_GLOBAL to fork behavior based on
				-- whether a test is running. We use this to avoid accessing
				-- protected APIs; it's a workaround that will go away someday.
				_G[RUNNING_GLOBAL] = true

				local nodeSuccess, nodeResult = call(childPlanNode.callback, function(message)
					return message .. "\n" .. debug.traceback()
				end)

				_G[RUNNING_GLOBAL] = nil

				-- If a node threw an error, we prefer to use that message over
				-- one created by fail() if it was set.
				if not nodeSuccess then
					success = false
					errorMessage = nodeResult
				end

				if success then
					childResultNode.status = TestEnum.TestStatus.Success
				else
					childResultNode.status = TestEnum.TestStatus.Failure
					table.insert(childResultNode.errors, errorMessage)
				end
			end
		elseif childPlanNode.type == TestEnum.NodeType.Describe then
			TestRunner.runPlanNode(session, childPlanNode, childPlanNode.HACK_NO_XPCALL)

			local status = TestEnum.TestStatus.Success

			-- Did we have an error trying build a test plan?
			if childPlanNode.loadError then
				status = TestEnum.TestStatus.Failure

				local message = "Error during planning: " .. childPlanNode.loadError

				table.insert(childResultNode.errors, message)
			else
				local skipped = true

				-- If all children were skipped, then we were skipped
				-- If any child failed, then we failed!
				for _, child in ipairs(childResultNode.children) do
					if child.status ~= TestEnum.TestStatus.Skipped then
						skipped = false

						if child.status == TestEnum.TestStatus.Failure then
							status = TestEnum.TestStatus.Failure
						end
					end
				end

				if skipped then
					status = TestEnum.TestStatus.Skipped
				end
			end

			childResultNode.status = status
		end

		session:popNode()
	end
end

return TestRunner</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="125">
        <Properties>
          <string name="Name">TestSession</string>
          <string name="Source">--[[
	Represents the state relevant while executing a test plan.

	Used by TestRunner to produce a TestResults object.

	Uses the same tree building structure as TestPlanBuilder; TestSession keeps
	track of a stack of nodes that represent the current path through the tree.
]]

local TestEnum = require(script.Parent.TestEnum)
local TestResults = require(script.Parent.TestResults)

local TestSession = {}

TestSession.__index = TestSession

--[[
	Create a TestSession related to the given TestPlan.

	The resulting TestResults object will be linked to this TestPlan.
]]
function TestSession.new(plan)
	local self = {
		results = TestResults.new(plan),
		nodeStack = {},
		hasFocusNodes = false
	}

	setmetatable(self, TestSession)

	return self
end

--[[
	Calculate success, failure, and skipped test counts in the tree at the
	current point in the execution.
]]
function TestSession:calculateTotals()
	local results = self.results

	results.successCount = 0
	results.failureCount = 0
	results.skippedCount = 0

	results:visitAllNodes(function(node)
		local status = node.status
		local nodeType = node.planNode.type

		if nodeType == TestEnum.NodeType.It then
			if status == TestEnum.TestStatus.Success then
				results.successCount = results.successCount + 1
			elseif status == TestEnum.TestStatus.Failure then
				results.failureCount = results.failureCount + 1
			elseif status == TestEnum.TestStatus.Skipped then
				results.skippedCount = results.skippedCount + 1
			end
		end
	end)
end

--[[
	Gathers all of the errors reported by tests and puts them at the top level
	of the TestResults object.
]]
function TestSession:gatherErrors()
	local results = self.results

	results.errors = {}

	results:visitAllNodes(function(node)
		if #node.errors > 0 then
			for _, message in ipairs(node.errors) do
				table.insert(results.errors, message)
			end
		end
	end)
end

--[[
	Calculates test totals, verifies the tree is valid, and returns results.
]]
function TestSession:finalize()
	if #self.nodeStack ~= 0 then
		error("Cannot finalize TestResults with nodes still on the stack!", 2)
	end

	self:calculateTotals()
	self:gatherErrors()

	return self.results
end

--[[
	Create a new test result node and push it onto the navigation stack.
]]
function TestSession:pushNode(planNode)
	local node = TestResults.createNode(planNode)

	local lastNode = self.nodeStack[#self.nodeStack] or self.results

	table.insert(lastNode.children, node)
	table.insert(self.nodeStack, node)

	return node
end

--[[
	Pops a node off of the navigation stack.
]]
function TestSession:popNode()
	assert(#self.nodeStack > 0, "Tried to pop from an empty node stack!")
	return table.remove(self.nodeStack, #self.nodeStack)
end

--[[
	Tells whether the current test we're in should be skipped.
]]
function TestSession:shouldSkip()
	-- If our test tree had any exclusive tests, then normal tests are skipped!
	if self.hasFocusNodes then
		for i = #self.nodeStack, 1, -1 do
			local node = self.nodeStack[i]

			-- Skipped tests are still skipped
			if node.planNode.modifier == TestEnum.NodeModifier.Skip then
				return true
			end

			-- Focused tests are the only ones that aren't skipped
			if node.planNode.modifier == TestEnum.NodeModifier.Focus then
				return false
			end
		end

		return true
	else
		for i = #self.nodeStack, 1, -1 do
			local node = self.nodeStack[i]

			if node.planNode.modifier == TestEnum.NodeModifier.Skip then
				return true
			end
		end
	end

	return false
end

return TestSession</string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="ServerScriptService" referent="126">
    <Properties>
      <string name="Name">ServerScriptService</string>
    </Properties>
    <Item class="Script" referent="127">
      <Properties>
        <string name="Name">RoactBenchmark</string>
        <string name="Source">--[[
	Locate all .bench.lua files in the given Roblox tree.
]]
local function findBenchmarkModules(root, moduleList)
	for _, child in ipairs(root:GetChildren()) do
		if child:IsA("ModuleScript") and child.Name:match("%.bench$") then
			table.insert(moduleList, child)
		end

		findBenchmarkModules(child, moduleList)
	end
end

local function noop()
end

local emptyTimes = {}
local function getEmptyTime(iterations)
	if emptyTimes[iterations] ~= nil then
		return emptyTimes[iterations]
	end

	local startTime = tick()

	for _ = 1, iterations do
		noop()
	end

	local endTime = tick()

	local result = endTime - startTime
	emptyTimes[iterations] = result

	return result
end

local benchmarkModules = {}

findBenchmarkModules(script, benchmarkModules)

table.sort(benchmarkModules, function(a, b)
	return a.Name &lt; b.Name
end)

local startMessage = (
	"Starting %d benchmarks..."
):format(
	#benchmarkModules
)
print(startMessage)
print()

for _, module in ipairs(benchmarkModules) do
	local benchmark = require(module)

	if benchmark.setup ~= nil then
		benchmark.setup()
	end
	local startTime = tick()
	local step = benchmark.step

	for i = 1, benchmark.iterations do
		step(i)
	end

	local endTime = tick()
	if benchmark.teardown ~= nil then
		benchmark.teardown()
	end

	local totalTime = (endTime - startTime) - getEmptyTime(benchmark.iterations)

	local message = (
		"Benchmark %s:\n\t(%d iterations) took %f s (%f ns/iteration)"
	):format(
		module.Name,
		benchmark.iterations,
		totalTime,
		1e9 * totalTime / benchmark.iterations
	)

	print(message)
	print()
end

print("Benchmarks complete!")</string>
      </Properties>
      <Item class="ModuleScript" referent="128">
        <Properties>
          <string name="Name">hello.bench</string>
          <string name="Source">local Roact = require(script.Parent.Parent.Roact)

return {
	iterations = 100000,
	step = function()
		local hello = Roact.createElement("StringValue", {
			Value = "Hello, world!",
		})

		local handle = Roact.mount(hello)
		Roact.unmount(handle)
	end,
}</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="129">
        <Properties>
          <string name="Name">nested.bench</string>
          <string name="Source">local Roact = require(script.Parent.Parent.Roact)

local function Container(props)
	local depth = props.depth
	local number = props.number

	if depth == 1 then
		return Roact.createElement("StringValue", {
			Value = tostring(number),
		})
	else
		return Roact.createElement("StringValue", {
			Value = tostring(number),
		}, {
			Roact.createElement(Container, {
				depth = depth - 1,
				number = props.number,
			}),
			Roact.createElement(Container, {
				depth = depth - 1,
				number = props.number,
			}),
			Roact.createElement(Container, {
				depth = depth - 1,
				number = props.number,
			}),
		})
	end
end

local depth = 4
local handle

return {
	iterations = 10000,
	setup = function()
		local container = Roact.createElement(Container, {
			depth = depth,
			number = 0,
		})

		handle = Roact.mount(container)
	end,
	teardown = function()
		Roact.unmount(handle)
	end,
	step = function()
		Roact.update(handle, Roact.createElement(Container, {
			depth = depth,
			number = i,
		}))
	end,
}</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="130">
        <Properties>
          <string name="Name">update.bench</string>
          <string name="Source">local Roact = require(script.Parent.Parent.Roact)

local tree

return {
	iterations = 100000,
	setup = function()
		tree = Roact.mount(Roact.createElement("StringValue", {
			Value = "Initial",
		}))
	end,
	teardown = function()
		Roact.unmount(tree)
	end,
	step = function(i)
		Roact.update(tree, Roact.createElement("StringValue", {
			Value = tostring(i),
		}))
	end,
}</string>
        </Properties>
      </Item>
    </Item>
    <Item class="Script" referent="131">
      <Properties>
        <string name="Name">RoactTests</string>
        <string name="Source">-- luacheck: globals __LEMUR__

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Roact = require(ReplicatedStorage.Roact)
local TestEZ = require(ReplicatedStorage.TestEZ)

Roact.setGlobalConfig({
	["internalTypeChecks"] = true,
	["typeChecks"] = true,
	["elementTracing"] = true,
	["propValidation"] = true,
})
local results = TestEZ.TestBootstrap:run(ReplicatedStorage.Roact, TestEZ.Reporters.TextReporter)

if __LEMUR__ then
	if results.failureCount > 0 then
		os.exit(1)
	end
end</string>
      </Properties>
    </Item>
  </Item>
  <Item class="StarterPlayer" referent="132">
    <Properties>
      <string name="Name">StarterPlayer</string>
    </Properties>
    <Item class="StarterPlayerScripts" referent="133">
      <Properties>
        <string name="Name">StarterPlayerScripts</string>
      </Properties>
      <Item class="LocalScript" referent="134">
        <Properties>
          <string name="Name">RoactExamples</string>
          <string name="Source">local PlayerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

local exampleData = {
	{
		name = "hello-roact",
		label = "Hello, Roact!",
	},
	{
		name = "clock",
		label = "Clock",
	},
	{
		name = "changed-signal",
		label = "Changed Signal",
	},
	{
		name = "stress-test",
		label = "Stress Test",
	},
	{
		name = "event",
		label = "Event",
	},
	{
		name = "ref",
		label = "Ref",
	},
	{
		name = "binding",
		label = "Binding",
	},
}

for _, example in ipairs(exampleData) do
	example.source = script:WaitForChild(example.name)
	example.start = require(example.source)
end

local Examples = {}

Examples.exampleList = nil

function Examples.makeBackButton()
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "Back to Examples"

	local button = Instance.new("TextButton")
	button.Font = Enum.Font.SourceSans
	button.TextSize = 20
	button.Size = UDim2.new(0, 150, 0, 80)
	button.Position = UDim2.new(0, 0, 0.5, 0)
	button.AnchorPoint = Vector2.new(0, 0.5)
	button.Text = "Back to Examples"
	button.BackgroundColor3 = Color3.new(0.9, 0.9, 0.9)
	button.BorderColor3 = Color3.new(0, 0, 0)

	button.Activated:Connect(function()
		screenGui:Destroy()

		Examples.onStop()
		Examples.onStop = nil

		Examples.exampleList = Examples.makeExampleList()
		Examples.exampleList.Parent = PlayerGui
	end)

	button.Parent = screenGui

	return screenGui
end

function Examples.openExample(example)
	Examples.exampleList:Destroy()

	local back = Examples.makeBackButton()
	back.Parent = PlayerGui

	Examples.onStop = example.start()
end

function Examples.makeExampleList()
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "Roact Examples"

	local exampleList = Instance.new("ScrollingFrame")
	exampleList.Size = UDim2.new(0, 400, 0, 600)
	exampleList.CanvasSize = UDim2.new(0, 400, 0, 80 * #exampleData)
	exampleList.Position = UDim2.new(0.5, 0, 0.5, 0)
	exampleList.AnchorPoint = Vector2.new(0.5, 0.5)
	exampleList.BorderSizePixel = 2
	exampleList.BackgroundColor3 = Color3.new(1, 1, 1)
	exampleList.TopImage = "rbxassetid://29050676"
	exampleList.MidImage = "rbxassetid://29050676"
	exampleList.BottomImage = "rbxassetid://29050676"
	exampleList.Parent = screenGui

	local listLayout = Instance.new("UIListLayout")
	listLayout.SortOrder = Enum.SortOrder.LayoutOrder
	listLayout.Parent = exampleList

	for index, example in ipairs(exampleData) do
		local label = ("%s\nexamples/%s"):format(example.label, example.name)

		local exampleCard = Instance.new("TextButton")
		exampleCard.Name = "Example: " .. example.name
		exampleCard.BackgroundColor3 = Color3.new(0.9, 0.9, 0.9)
		exampleCard.BorderSizePixel = 0
		exampleCard.Text = label
		exampleCard.Font = Enum.Font.SourceSans
		exampleCard.TextSize = 20
		exampleCard.Size = UDim2.new(1, 0, 0, 80)
		exampleCard.LayoutOrder = index

		exampleCard.Activated:Connect(function()
			Examples.openExample(example)
		end)

		exampleCard.Parent = exampleList

		local bottomBorder = Instance.new("Frame")
		bottomBorder.Name = "Bottom Border"
		bottomBorder.Position = UDim2.new(0, 0, 1, -1)
		bottomBorder.Size = UDim2.new(0, 400, 0, 1)
		bottomBorder.BorderSizePixel = 0
		bottomBorder.BackgroundColor3 = Color3.new(0, 0, 0)
		bottomBorder.ZIndex = 2
		bottomBorder.Parent = exampleCard
	end

	return screenGui
end

Examples.exampleList = Examples.makeExampleList()
Examples.exampleList.Parent = PlayerGui</string>
        </Properties>
        <Item class="ModuleScript" referent="135">
          <Properties>
            <string name="Name">binding</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	local BindingExample = Roact.Component:extend("BindingExample")

	function BindingExample:init()
		self.binding, self.updateBinding = Roact.createBinding(0)
	end

	function BindingExample:render()
		return Roact.createElement("Frame", {
			Size = UDim2.new(0, 200, 0, 200),
			Position = self.binding:map(function(value)
				return UDim2.new(0.5 + value / 200, 0, 0.5, 0)
			end),
			AnchorPoint = Vector2.new(0.5, 0.5),
			BorderSizePixel = self.binding,
		})
	end

	function BindingExample:didMount()
		self.running = true

		spawn(function()
			while self.running do
				-- With each update, the frame's border grows and it moves to the right
				self.updateBinding(self.binding:getValue() + 1)

				wait(0.1)
			end
		end)
	end

	function BindingExample:willUnmount()
		self.running = false
	end

	local app = Roact.createElement("ScreenGui", nil, {
		BindingExample = Roact.createElement(BindingExample),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="136">
          <Properties>
            <string name="Name">changed-signal</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	--[[
		A TextBox that the user can type into. Takes a callback to be
		triggered when text changes.
	]]
	local function InputTextBox(props)
		local onTextChanged = props.onTextChanged
		local layoutOrder = props.layoutOrder

		return Roact.createElement("TextBox",{
			LayoutOrder = layoutOrder,
			Text = "Type Here!",
			Size = UDim2.new(1, 0, 0.5, 0),
			[Roact.Change.Text] = onTextChanged
		})
	end

	--[[
		A TextLabel that display the given text in reverse.
	]]
	local function ReversedText(props)
		local inputText = props.inputText
		local layoutOrder = props.layoutOrder

		return Roact.createElement("TextLabel",{
			LayoutOrder = layoutOrder,
			Size = UDim2.new(1, 0, 0.5, 0),
			Text = "Reversed: " .. inputText:reverse(),
		})
	end

	--[[
		Displays a TextBox and a TextLabel that shows the reverse of
		the TextBox's input in real time
	]]
	local TextReverser = Roact.Component:extend("TextReverser")

	function TextReverser:init()
		self.state = {
			text = "",
		}
	end

	function TextReverser:render()
		local text = self.state.text

		return Roact.createElement("Frame", {
			Size = UDim2.new(0, 400, 0, 400),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
		}, {
			Layout = Roact.createElement("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
			}),
			InputTextBox = Roact.createElement(InputTextBox, {
				layoutOrder = 1,
				onTextChanged = function(rbx)
					self:setState({
						text = rbx.Text or "",
					})
				end
			}),
			ReversedText = Roact.createElement(ReversedText, {
				layoutOrder = 2,
				inputText = text,
			})
		})
	end

	local app = Roact.createElement("ScreenGui", nil, {
		TextReverser = Roact.createElement(TextReverser),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="137">
          <Properties>
            <string name="Name">clock</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	local function ClockApp(props)
		local time = props.time

		return Roact.createElement("ScreenGui", nil, {
			Main = Roact.createElement("TextLabel", {
				Size = UDim2.new(0, 400, 0, 300),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Text = "The current time is: " .. time,
			}),
		})
	end

	local running = true
	local currentTime = 0
	local handle = Roact.mount(Roact.createElement(ClockApp, {
		time = currentTime,
	}), PlayerGui)

	spawn(function()
		while running do
			currentTime = currentTime + 1

			handle = Roact.reconcile(handle, Roact.createElement(ClockApp, {
				time = currentTime,
			}))

			wait(1)
		end
	end)

	local function stop()
		running = false
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="138">
          <Properties>
            <string name="Name">event</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	local app = Roact.createElement("ScreenGui", nil, {
		Button = Roact.createElement("TextButton", {
			Size = UDim2.new(0.5, 0, 0.5, 0),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),

			-- Attach event listeners using `Roact.Event[eventName]`
			-- Event listeners get `rbx` as their first parameter
			-- followed by their normal event arguments.
			[Roact.Event.Activated] = function(rbx)
				print("The button was clicked!")
			end
		}),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="139">
          <Properties>
            <string name="Name">hello-roact</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	local app = Roact.createElement("ScreenGui", nil, {
		Main = Roact.createElement("TextLabel", {
			Size = UDim2.new(0, 400, 0, 300),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Text = "Hello, Roact!",
		}),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="140">
          <Properties>
            <string name="Name">ref</string>
            <string name="Source">return function()
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	--[[
		A search bar with an icon and a text box
		When the icon is clicked, the TextBox captures focus
	]]
	local SearchBar = Roact.Component:extend("SearchBar")

	function SearchBar:init()
		self.textBoxRef = Roact.createRef()
	end

	function SearchBar:render()
		return Roact.createElement("Frame", {
			Size = UDim2.new(0, 300, 0, 50),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
		}, {
			SearchIcon = Roact.createElement("TextButton", {
				Size = UDim2.new(0, 50, 0, 50),
				AutoButtonColor = false,
				Text = "=>",

				-- Handle click events on the search button
				[Roact.Event.Activated] = function()
					print("Button clicked; have the TextBox capture focus")
					self.textBoxRef:getValue():CaptureFocus()
				end
			}),

			SearchTextBox = Roact.createElement("TextBox", {
				Size = UDim2.new(1, -50, 1, 0),
				Position = UDim2.new(0, 50, 0, 0),

				-- Use Roact.Ref to get a reference to the underlying object
				[Roact.Ref] = self.textBoxRef
			}),
		})
	end

	local app = Roact.createElement("ScreenGui", nil, {
		SearchBar = Roact.createElement(SearchBar),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="141">
          <Properties>
            <string name="Name">stress-test</string>
            <string name="Source">return function()
	local RunService = game:GetService("RunService")
	local PlayerGui = game:GetService("Players").LocalPlayer.PlayerGui

	local Roact = require(game.ReplicatedStorage.Roact)

	local NODE_SIZE = 10
	local GRID_SIZE = 50

	--[[
		A frame that changes its background color according to time and position props
	]]
	local function Node(props)
		local x = props.x
		local y = props.y
		local time = props.time

		local n = time + x / NODE_SIZE + y / NODE_SIZE

		return Roact.createElement("Frame", {
			Size = UDim2.new(0, NODE_SIZE, 0, NODE_SIZE),
			Position = UDim2.new(0, NODE_SIZE * x, 0, NODE_SIZE * y),
			BackgroundColor3 = Color3.new(0.5 + 0.5 * math.sin(n), 0.5, 0.5),
		})
	end

	--[[
		Displays a large number of nodes and updates each of them every RunService step
	]]
	local App = Roact.Component:extend("App")

	function App:init()
		self.state = {
			time = tick(),
		}
	end

	function App:render()
		local time = self.state.time
		local nodes = {}

		local n = 0
		for x = 0, GRID_SIZE - 1 do
			for y = 0, GRID_SIZE - 1 do
				n = n + 1
				nodes[n] = Roact.createElement(Node, {
					x = x,
					y = y,
					time = time,
				})
			end
		end

		return Roact.createElement("Frame", {
			Size = UDim2.new(0, GRID_SIZE * NODE_SIZE, 0, GRID_SIZE * NODE_SIZE),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
		}, nodes)
	end

	function App:didMount()
		self.connection = RunService.Stepped:Connect(function()
			self:setState({
				time = tick(),
			})
		end)
	end

	function App:willUnmount()
		self.connection:Disconnect()
	end

	local app = Roact.createElement("ScreenGui", nil, {
		Main = Roact.createElement(App),
	})

	local handle = Roact.mount(app, PlayerGui)

	local function stop()
		Roact.unmount(handle)
	end

	return stop
end</string>
          </Properties>
        </Item>
      </Item>
    </Item>
  </Item>
</roblox>